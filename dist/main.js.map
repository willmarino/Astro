{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/platform.js","webpack:///./src/environment.js","webpack:///./src/projectile.js","webpack:///./src/human.js","webpack:///./src/background.js","webpack:///./src/computer.js","webpack:///./src/score.js","webpack:///./src/land_computer.js","webpack:///./src/index.js","webpack:///./src/game.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Platform","xStart","yStart","width","height","this","context","fillStyle","fillRect","x","y","Environment","dimensions","human","platforms","generatePlatforms","push","length","prevPlat","newYStart","generatePlatformYStart","generatePlatformGap","generatePlatformWidth","randHeight","prevPlatHeight","randomOffset","Math","round","random","draw","action","move","that","xPos","xVel","forEach","plat","shift","pop","newPlatWidth","nextPlat","unshift","Projectile","player","projectileXVel","projectileYVel","homing","owner","type","didHit","playerXVel","playerXPos","playerYPos","yPos","yVel","id","projectileCount","homingMove","homingDraw","Human","environment","computerProjectiles","CONSTANTS","GRAVITY","NORMALFORCE","alive","projectiles","jumping","additionalScore","curJumps","dashes","onFloor","curPlat","lastPlat","movingLeft","movingRight","goingDown","distanceCovered","bindLeft","bindRight","bindUndoRight","bindUndoLeft","bindDown","bindUndoDown","bindDash","bindJump","setClick","newProjectiles","keys","projectile","assign","values","animate","filterProjectiles","collidedWithProjectiles","applyGravity","getCurrentPlatform","isPlayerOnSide","window","addEventListener","e","moveLeft","moveRight","jump","down","setTimeout","canvas","rect","getBoundingClientRect","pos","clientX","left","clientY","top","newProj","configureProjectile","newId","xDelta","yDelta","totalDeltasquared","pow","proportion","sqrt","obj1","obj2","obj1CenterX","obj1CenterY","obj1Diag","obj2CenterX","obj2CenterY","collide","Background","colors","num","Computer","JETPACK","humanProjectiles","canShoot","initiateShot","setInterval","shoot","playerPosX","playerPosY","randNum","randOffset","squaredDeltaX","squaredDeltaY","totalDelta","fetchHumanPosition","switchDirection","collidedWithFloor","hp","Score","initScore","score","font","fillText","LandComputer","goingRight","goingLeft","jumpingYVel","switchDirections","isOnEdge","beginJump","indexOf","heightDiff","abs","xGap","initYVel","endX","startX","xDiff","yvel","calculateFall","yVertex","dist","maxHeight","calculateRise","steps","roundedSteps","count","platform","game","getContext","running","computers","computersBeingAdded","numComputers","allProjectiles","startMenu","document","getElementById","playButton","remove","click","filter","background","newCompStartX","comp","proj","curComp","sendEnemyProjectiles","setPlayerTracking","landComp","setNumComputers","spawnComputer","compStartX","run","play","step","gameOver","rerun","addEnemyScore","filterComputers","requestAnimationFrame","appendChild","restart"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\n\nexport default class Platform{\n  constructor(xStart, yStart, width, height){\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.width = width;\n    this.height = height;\n  }\n\n  draw(context) {\n    context.fillStyle = 'black';\n    context.fillRect(this.xStart, this.yStart, this.width, this.height);\n  }\n\n  move(x, y){\n    this.xStart += x;\n    this.yStart += y;\n  }\n\n}","import Platform from \"./platform\";\n\nexport default class Environment{\n  constructor(dimensions, context, human=null){\n    this.dimensions = {\n      height: dimensions.height,\n      width: dimensions.width\n    };\n    this.context = context;\n\n    this.height = 300;\n\n    this.platforms = [];\n    this.generatePlatforms();\n\n    this.human = human;\n  }\n\n  generatePlatforms(){\n    this.platforms.push(\n      new Platform(-1360, 550, 600, 15)\n    );\n    while(\n      this.platforms[this.platforms.length - 1].xStart +\n      this.platforms[this.platforms.length - 1].width < 2000){\n        let prevPlat = this.platforms[this.platforms.length - 1];\n        let newYStart = this.generatePlatformYStart();\n        if(newYStart - prevPlat.yStart > 50){\n          newYStart = prevPlat.yStart + 50;\n        }\n        this.platforms.push(\n          new Platform(\n            prevPlat.xStart + prevPlat.width + this.generatePlatformGap(),\n            newYStart,\n            this.generatePlatformWidth(),\n            15\n          ));\n      }\n  }\n\n  generatePlatformYStart(){\n    if(this.platforms.length === 0){\n      return 550;\n    }else{\n      let prevPlatHeight = this.platforms[this.platforms.length - 1].yStart;\n      let randomOffset = Math.round(Math.random() * 150);\n      if(randomOffset < 30){\n        randomOffset = 50;\n      }\n      let randHeight;\n      if(Math.random() < 0.5){\n        randHeight = prevPlatHeight + randomOffset;\n      }else{\n        randHeight = prevPlatHeight - randomOffset;\n      }\n      if(randHeight < 350){\n        randHeight = 350;\n      }else if(randHeight > 625){\n        randHeight = 625;\n      }\n      return randHeight;\n    }\n  }\n\n  generatePlatformWidth(){\n    let randomOffset = Math.round(Math.random() * 200);\n    // let randomNegOffset = Math.round(Math.random() * (200 * (-1)));\n    let randNum = Math.random();\n    if(randNum < .5){\n      return 400 + randomOffset;\n    }else{\n      return 400 - randomOffset;\n    }\n  }\n\n  generatePlatformGap(){\n    return Math.round(Math.random() * 100) + 100;\n  }\n\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n\n  animate(context){\n    this.draw(context);\n    this.action();\n  }\n\n  action(){\n    this.move();\n  }\n\n  move(){\n    let that = this;\n    if(this.human.xPos >= 800 && this.human.xVel > 0){\n      this.platforms.forEach((plat) => {\n        plat.move(that.human.xVel * (-1) - .1, 0);\n      });\n    }else if(this.human.xPos <= 300 && this.human.xVel < 0){\n      this.platforms.forEach((plat) => {\n        plat.move(this.human.xVel * (-1) + .1, 0);\n      });\n    }\n    if(this.platforms[0].xStart < -1450){\n      this.platforms.shift();\n      let prevPlat = this.platforms[this.platforms.length - 1];\n      this.platforms.push(\n        new Platform(\n          prevPlat.xStart + prevPlat.width + this.generatePlatformGap(),\n          this.generatePlatformYStart(),\n          this.generatePlatformWidth(),\n          15\n        ));\n    }else if(this.platforms[this.platforms.length - 1].xStart > 1300){\n      this.platforms.pop();\n      let newPlatWidth = this.generatePlatformWidth();\n      let nextPlat = this.platforms[0];\n      this.platforms.unshift(\n        new Platform(\n          nextPlat.xStart - this.generatePlatformGap() - newPlatWidth,\n          this.generatePlatformYStart(),\n          newPlatWidth,\n          15\n        ));\n    }\n  }\n\n  draw(context){\n    this.platforms.forEach((p) => {\n      p.draw(context);\n    });\n    \n    \n\n  }\n\n}","\n\nexport default class Projectile{\n  // constructor(id, playerXVel, playerPos, context, xVel, yVel){\n  constructor(player, projectileXVel, projectileYVel, homing=false){\n\n    this.homing = homing;\n\n    this.owner = player.type;\n    this.context = player.context;\n\n    this.didHit = false;\n\n    this.playerXVel = player.xVel;\n    this.playerXPos = player.xPos;\n    this.playerYPos = player.yPos;\n\n    this.xPos = player.xPos;\n    this.yPos = player.yPos;\n    this.xVel = projectileXVel;\n    this.yVel = projectileYVel;\n    if(player.type === 'human'){\n      this.width = 5;\n      this.height = 5;\n    }else{\n      if(homing){\n        this.width = 20;\n        this.height = 20;  \n      }else{\n        this.width = 5;\n        this.height = 5;\n      }\n    }\n\n    this.id = player.projectileCount;\n  }\n  \n  animate(context, xVel=null, yVel=null){\n    if(this.homing === true){\n      this.homingMove(xVel, yVel);\n      this.homingDraw(context);\n    }else{\n      this.move();\n      this.draw(context);\n    }\n  }\n  \n  move(){\n    if((this.playerXPos >= 800 && this.playerXVel >= 0)){\n      this.xPos += this.xVel;\n      this.xPos -= this.playerXVel;\n      // this.xPos -= (this.playerXVel / 2);\n      this.yPos += this.yVel;\n    } else if ((this.playerXPos <= 300 && this.playerXVel <= 0)){\n      this.xPos += this.xVel;\n      this.xPos -= (this.playerXVel / 2);\n      this.yPos += this.yVel;\n    }else{\n      this.xPos += this.xVel;\n      this.yPos += this.yVel;\n    }\n    // this.xPos += this.xVel;\n    // this.yPos += this.yVel;\n  }\n\n  homingMove(xVel, yVel){\n    this.xPos += xVel;\n    this.yPos += yVel;\n  }\n\n\n  draw(context){\n    if(!this.didHit){\n      if(this.owner === 'human'){\n        context.fillStyle = 'black';\n        context.fillRect(this.xPos, this.yPos, this.width, this.height);  \n      }else{\n        context.fillStyle = 'white';\n        context.fillRect(this.xPos, this.yPos, this.width, this.height);\n      }\n    }\n  }\n\n  homingDraw(context) {\n    if (!this.didHit) {\n      context.fillStyle = 'green';\n      context.fillRect(this.xPos, this.yPos, this.width, this.height);\n    }\n  }\n\n}","import Projectile from \"./projectile\";\n\nexport default class Human{\n\tconstructor(environment, context, computerProjectiles){\n\t\tthis.type = 'human';\n\n\t\tthis.CONSTANTS = {\n\t\t\tGRAVITY: 0.5,\n\t\t\tNORMALFORCE: -0.5\n\t\t};\n\n\t\tthis.alive = true;\n\t\tthis.projectiles = {};\n\t\tthis.environment = environment;\n\t\tthis.context = context;\n\t\tthis.computerProjectiles = computerProjectiles;\n\t\tthis.jumping = false;\n\t\tthis.projectileCount = 0;\n\n\t\tthis.additionalScore = 0;\n\n\t\tthis.curJumps = 0;\n\t\tthis.dashes = 0;\n\n    this.xPos = 350;\n    this.yPos = 100;\n    this.yVel = 0;\n    this.xVel = 0;\n    this.width = 15;\n\t\tthis.height = 15;\n\t\t\n\t\tthis.onFloor = false;\n\t\tthis.curPlat = null;\n\t\tthis.lastPlat = this.environment.platforms[0];\n\n\t\tthis.movingLeft = false;\n\t\tthis.movingRight = false;\n\t\tthis.goingDown = false;\n\n\t\tthis.distanceCovered = 0;\n\n\t\tthis.bindLeft();\n\t\tthis.bindRight();\n\t\tthis.bindUndoRight();\n\t\tthis.bindUndoLeft();\n\t\tthis.bindDown();\n\t\tthis.bindUndoDown();\n\t\tthis.bindDash();\n\n    this.bindJump();\n    this.setClick = this.setClick.bind(this);\n    this.setClick(this);\n\t}\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------MAIN---------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\n\tfilterProjectiles(){\n\t\tlet newProjectiles = {};\n\t\tlet that = this;\n\t\tObject.keys(this.projectiles).forEach((key) => {\n\t\t\tif(that.projectiles[key].yPos < 710 && that.projectiles[key].yPos > -10){\n\t\t\t\tlet projectile = {[key]: that.projectiles[key]}\n\t\t\t\tnewProjectiles = Object.assign(projectile, newProjectiles);\n\t\t\t}\n\t\t})\n\t\tthis.projectiles = newProjectiles;\n\t}\n\n\n\tanimate(context) {\n\t\tthis.move();\n\t\tthis.draw(context);\n\t\tif (Object.values(this.projectiles).length > 0) {\n\t\t\tObject.values(this.projectiles).forEach((p) => {\n\t\t\t\tp.animate(context);\n\t\t\t});\n\t\t}\n\t\tthis.filterProjectiles();\n\n\t\tthis.collidedWithProjectiles();\n\t}\n\n\tdraw(context) {\n\t\tcontext.fillStyle = 'gray';\n\t\tcontext.fillRect(\n\t\t\tthis.xPos, this.yPos, this.width, this.height\n\t\t);\n\t}\n\n\tmove(){\n\n\t\t// if player is no longer 'alive', then apply gravity until they fall off screen\n\t\tif(!this.alive){\n\t\t\tthis.applyGravity();\n\t\t\tthis.yPos += this.yVel;\n\t\t\treturn;\n\t\t}\n\n\t\t// check whether or not the player is above a platform, and if so, which platform\n\t\tthis.getCurrentPlatform();\n\n\t\t// if player is above a platform, set jumping flag to false based on velocity and position\n\t\t// if player is not above a platform, set onfloor flag to false\n\t\tif(this.curPlat){\n\t\t\tif(this.yVel > 0 && this.yPos < (this.curPlat.yStart - 20 || this.lastPlat.yStart) ){\n\t\t\t\tthis.jumping = false;\n\t\t\t}\n\t\t}else if(!this.curPlat){\n\t\t\tthis.onFloor = false;\n\t\t}\n\t\t// check whether or not the player is above a platform, and if so, which platform\n\t\tthis.getCurrentPlatform();\n\n\t\t// if player is onfloor and not jumping, reset dashes and jumps, set yPos platform plus player height,\n\t\t// set yVel to zero, and apply horizontal movement based on whether or not player has reached the designated side zones\n\t\tif(this.onFloor && !this.jumping){\n\t\t\tthis.dashes = 0;\n\t\t\tthis.curJumps = 0;\n\t\t\tthis.yPos = this.curPlat.yStart - this.height;\n\t\t\tthis.yVel = 0;\n\t\t\tthis.isPlayerOnSide();\n\t\t// if player is not yet 'onfloor', but is above a platform, check ypos to see whether onfloor flag should be set to true\n\t\t// apply horizontal movement based on whether or not player has reached the designated side zones\n\t\t// whether or not player is above a platform, apply gravity\n\t\t}else if(!this.onFloor){\n\t\t\tif(this.curPlat){\n\t\t\t\tif(this.yPos >= this.curPlat.yStart - this.height && this.yVel >= 0){\n\t\t\t\t\tthis.onFloor = true;\n\t\t\t\t\tthis.isPlayerOnSide();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.yVel += this.CONSTANTS.GRAVITY;\n\t\t\tthis.yPos += this.yVel;\n\t\t\tthis.isPlayerOnSide();\n\t\t// if player is onfloor but jumping, have them leave the floor, circumventing the floor-stick effect\n\t\t}else if(this.onFloor && this.jumping){\n\t\t\tthis.yPos += this.yVel;\n\t\t\tthis.isPlayerOnSide();\n\t\t}\n\t\t// apply friction to player movement to slow them down if no movement keys are being pressed.\n\t\tif(!this.movingLeft && !this.movingRight){\n\t\t\tif(this.xVel > 0){\n\t\t\t\tthis.xVel -= .3;\n\t\t\t}else if(this.xVel < 0){\n\t\t\t\tthis.xVel += .3;\n\t\t\t}\n\t\t}\n\t\t// add change in xPos to total distance covered, will be used to change rounds\n\t\tthis.distanceCovered += this.xVel;\n\t}\n\n\t// if player is at 300 or 800 px, stop horizontal movement to avoid leaving screen and give player\n\t// a view of upcoming obstacles\n\tisPlayerOnSide(){\n\t\tif ((this.xPos >= 800 && this.xVel >= 0) || (this.xPos <= 300 && this.xVel <= 0)) {\n\t\t\tnull;\n\t\t} else {\n\t\t\tthis.xPos += this.xVel;\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\tapplyGravity(){\n\t\tthis.yVel += this.CONSTANTS.GRAVITY;\n\t}\n\n\tisInAir(){\n\t\tif(!this.curPlat){\n\t\t\treturn true;\n\t\t}\n\t\tif(this.yPos < (this.curPlat.yStart - this.height)){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tisOnFloor(){\n\t\tif(!this.curPlat){\n\t\t\treturn false;\n\t\t}\n\t\tif(this.yPos > (this.curPlat.yStart - this.curPlat.height)){\n\t\t\tif(this.yPos < (this.curPlat.yStart + 5)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// --------------------------------------------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\n\tcollidedWithFloor() {\n\t\tif (this.curPlat) {\n\t\t\tif (this.yPos >= this.curPlat.yStart - 10) {\n\t\t\t\tthis.onFloor = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// checks if player xPos is between the left and right edges of any platform('above platform')\n\tgetCurrentPlatform() {\n\t\t// \n\t\tlet that = this;\n\t\tfor (let i = 0; i < this.environment.platforms.length; i++) {\n\t\t\tlet plat = that.environment.platforms[i];\n\t\t\tif (that.xPos > plat.xStart && that.xPos < plat.xStart + plat.width && that.yPos < plat.yStart + plat.height) {\n\t\t\t\t\n\t\t\t\tthat.curPlat = plat;\n\t\t\t\tthat.lastPlat = that.curPlat;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tthat.curPlat = null;\n\t\t\t\t// that.onFloor = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS--------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS-------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\n\tbindLeft() {\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif (e.key === 'a') {\n\t\t\t\tthis.moveLeft();\n\t\t\t\tthis.movingLeft = true;\n\t\t\t\tthis.movingRight = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindUndoLeft(){\n\t\twindow.addEventListener('keyup', (e) => {\n\t\t\tif (e.key === 'a') {\n\t\t\t\t// this.moveLeft();\n\t\t\t\tthis.movingLeft = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindRight(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif (e.key === 'd') {\n\t\t\t\tthis.moveRight();\n\t\t\t\tthis.movingRight = true;\n\t\t\t\tthis.movingLeft = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindUndoRight(){\n\t\twindow.addEventListener('keyup', (e) => {\n\t\t\tif (e.key === 'd') {\n\t\t\t\t// this.moveRight();\n\t\t\t\tthis.movingRight = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindJump() {\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif (e.key === 'w') {\n\t\t\t\tthis.jump();\n\t\t\t}\n\t\t});\n\t}\n\n\tbindDown(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif(e.key === 's'){\n\t\t\t\tthis.goingDown = true;\n\t\t\t\tthis.down();\n\t\t\t}\n\t\t});\n\t}\n\n\tbindUndoDown(){\n\t\twindow.addEventListener('keyup', (e) => {\n\t\t\tif (e.key === 's') {\n\t\t\t\t// this.down();\n\t\t\t\tthis.goingDown = false;\n\t\t\t}\n\t\t});\n\t}\n\n\t// loop sets five timeouts in order to gradually slow down player after dashing\n\tbindDash(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif(e.key === 'Spacebar' || e.key === ' '){\n\t\t\t\tif(this.dashes > 0){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(this.movingLeft){\n\t\t\t\t\tthis.xVel -= 7.5;\n\t\t\t\t\tthis.dashes += 1;\n\t\t\t\t\tfor(let i = 0; i < 5; i++){\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.xVel += 1.5;\n\t\t\t\t\t\t}, 100 * i)\n\t\t\t\t\t}\n\t\t\t\t}else if(this.movingRight){\n\t\t\t\t\tthis.xVel += 7.5;\n\t\t\t\t\tthis.dashes += 1;\n\t\t\t\t\tfor(let i = 0; i < 5; i++){\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.xVel -= 1.5;\n\t\t\t\t\t\t}, 100 * i)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\n\n// ----------------------------------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG--------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG-------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n\n\t// if player clicks, fetch click coordinates, wrap them in an object, create a projectile with the result\n\t// of passing that object into configureProjectile\n\tsetClick(that) {\n\t\tthis.context.canvas.addEventListener('click', (e) => {\n\t\t\tlet rect = this.context.canvas.getBoundingClientRect();\n\t\t\tlet pos = {};\n\t\t\tpos.x = e.clientX - rect.left;\n\t\t\tpos.y = e.clientY - rect.top;\n\n\t\t\tlet newProj = new Projectile(that, ...that.configureProjectile(pos));\n\t\t\tlet newId = newProj.id;\n\t\t\tthat.projectiles = Object.assign({[newId]: newProj}, that.projectiles);\n\n\t\t\tthis.projectileCount += 1;\n\t\t});\n\t}\n\n\t// calculates the necessary x and y velocities for the projectile(starting at player position)\n\t// to get to the coordinates of the click\n\tconfigureProjectile(pos){\n\t\tlet xDelta = pos.x - this.xPos;\n\t\tlet yDelta = pos.y - this.yPos;\n\n\t\tlet squaredDeltaX = Math.pow(xDelta, 2);\n\t\tlet squaredDeltaY = Math.pow(yDelta, 2);\n\t\tlet totalDeltasquared = squaredDeltaX + squaredDeltaY;\n\t\tlet totalDelta = Math.sqrt(totalDeltasquared);\n\n\t\tlet proportion = 20 / totalDelta;\n\t\tlet xVel = xDelta * proportion;\n\t\tlet yVel = yDelta * proportion;\n\n\t\treturn [xVel, yVel];\n\t}\n\t// ----------------------------------------------------------------------------------------------------\n\t// -------------------------MOVEMENT--------------------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT-------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\n\tjump(){\n\t\tif(this.curJumps < 2){\n\t\t\tthis.onFloor = false;\n\t\t\tthis.jumping = true;\n\t\t\tthis.yVel = -12;\n\t\t\tthis.curJumps += 1;\n\t\t}\n\t}\n\n\tmoveRight(){\n\t\tthis.xVel = 5;\n\t}\n\n\tmoveLeft() {\n\t\tthis.xVel = -5;\n\t}\n\n\tdown(){\n\t\tif(this.goingDown === true){\n\t\t\tthis.yVel += 5;\n\t\t}\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t\n\n\t// commented out text is using four-corner detection, which is buggy, perhaps to small projectile sizes?\n\tcollide(obj1, obj2) {\n\t\t// let obj1TopLeft = {x : obj1.xPos, y: obj1.yPos};\n\t\t// let obj1TopRight = { x: obj1.xPos + obj1.width, y: obj1.yPos };\n\t\t// let obj1BotLeft = { x: obj1.xPos, y: obj1.yPos + obj1.height };\n\t\t// let obj1BotRight = { x : obj1.xPos + obj1.width, y : obj1.yPos + obj1.height};\n\n\t\t\n\t\t// let obj2TopLeft = {x : obj2.xPos, y : obj2.yPos};\n\t\t// let obj2TopRight = { x: obj2.xPos + obj2.width, y: obj2.yPos };\n\t\t// let obj2BotLeft = { x: obj2.xPos, y: obj2.yPos + obj2.height };\n\t\t// let obj2BotRight = {x : obj2.xPos + obj2.width, y : obj2.yPos + obj2.height};\n\n\t\tlet obj1CenterX = obj1.xPos + (obj1.width / 2);\n\t\tlet obj1CenterY = obj1.yPos + (obj1.height / 2);\n\t\tlet obj1Diag = Math.sqrt(Math.pow(obj1.width / 2, 2) + Math.pow(obj1.height / 2, 2));\n\n\t\tlet obj2CenterX = obj2.xPos + (obj2.width / 2);\n\t\tlet obj2CenterY = obj2.yPos + (obj2.height / 2);\n\t\tlet obj2Diag = Math.sqrt(Math.pow(obj2.width / 2, 2) + Math.pow(obj2.height / 2, 2));\n\n\t\tlet totalDelta = Math.sqrt(Math.pow(obj1CenterX - obj2CenterX, 2) + Math.pow(obj1CenterY - obj2CenterY, 2))\n\n\t\t// this is using top right pos, should be using center, but probably doesnt matter\n\t\t// let totalDelta = Math.sqrt(Math.pow(obj1.xPos - obj2.xPos, 2) + Math.pow(obj1.yPos - obj2.yPos, 2));\n\n\t\t// let totalDelta = Math.sqrt(Math.pow(obj1CenterX - obj2CenterX))\n\n\t\t// if((obj1TopLeft.x < obj2BotRight.x && obj1TopLeft.y < obj2BotRight.y) &&\n\t\t//   (obj1Diag + obj2Diag > totalDelta)){\n\t\t//   return true;\n\t\t// } else if (obj1TopRight.x > obj2BotLeft.x && obj1TopRight.y > obj2BotLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n\t\t//   return true;\n\t\t// } else if (obj1BotRight.x > obj2TopLeft.x && obj1BotRight.y > obj2TopLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n\t\t//   return true;\n\t\t// } else if (obj1BotLeft.x < obj2TopRight.x && obj1BotLeft.y > obj2TopRight.y && (obj1Diag + obj2Diag > totalDelta)){\n\t\t//   return true;\n\t\t// }else{\n\t\t//   return false;\n\t\t// }\n\n\t\tif(obj1Diag + obj2Diag + 10 > totalDelta) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tcollidedWithProjectiles() {\n\t\tlet that = this;\n\t\tObject.values(this.computerProjectiles).forEach((p) => {\n\t\t\tif (that.collide(that, p)) {\n\t\t\t\tp.didHit = true;\n\t\t\t\tthat.alive = false;\n\t\t\t}\n\t\t});\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------------------------------------------------------------------------\n\n}","\n\nexport default class Background{\n  constructor(dimensions, round=0){\n    this.dimensions = dimensions;\n    this.round = round;\n\n    this.colors = [\n      '#5eaec4',\n      'green',\n      'orange',\n      'blue'\n    ];\n  }\n\n  setRound(num){\n    this.round = num;\n  }\n\n  draw(context){\n    context.fillStyle = this.colors[this.round];\n    context.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  animate(context){\n    this.draw(context);\n  }\n}","import Projectile from \"./projectile\";\n\nexport default class Computer{\n  constructor(environment, context, human, xPos=850){\n    this.type = 'computer';\n\n\t\tthis.CONSTANTS = {\n      GRAVITY: 0.5,\n      JETPACK: 0.5\n    };\n\n    this.alive = true;\n\t\tthis.environment = environment;\n    this.context = context;\n    this.projectiles = {};\n    this.humanProjectiles = human.projectiles;\n\n    this.additionalScore = 0;\n\n    this.projectileCount = 10000;\n\n\t\tthis.xPos = xPos;\n    this.yPos = 100;\n\t\tthis.yVel = 0;\n\t\tthis.xVel = -5;\n\t\tthis.width = 30;\n    this.height = 30;\n    \n    this.human = human;\n\n    this.canShoot = false;\n    this.initiateShot();\n\n\t}\n\n  // ------------------------------------------------------------\n\n  initiateShot(){\n    window.setInterval(() => {\n      this.shoot();\n    }, 2000);\n  }\n\n  switchDirection(){\n    if(this.xPos <= 20){\n      this.xVel = 5;\n    }else if(this.xPos >= 1080){\n      this.xVel = -5;\n    }\n  }\n\n  fetchHumanPosition(){\n    this.playerPosX = this.human.xPos;\n    this.playerPosY = this.human.yPos;\n  }\n\n  shoot(){\n    let pos = {};\n    pos.x = this.playerPosX;\n    pos.y = this.playerPosY;\n\n    let newProj;\n    \n    let randNum = Math.round(Math.random() * 10);\n    if(randNum >= 11){\n      newProj = (\n        new Projectile(\n          this,\n          ...this.configureProjectile(pos),\n          true\n        )\n      );\n    }else{\n      newProj = (\n        new Projectile(\n          this,\n          ...this.configureProjectile(pos)\n        )\n      );\n    }\n        \n    this.projectiles[newProj.id] = newProj;\n    this.projectileCount += 1;\n  }\n\n\tconfigureProjectile(pos, homing=false){\n    let randNum = Math.random();\n    \n    let xDelta = pos.x - this.xPos;\n    let yDelta = pos.y - this.yPos;\n\n    if(homing === false){\n      let randOffset = Math.round(Math.random() * 200);\n      if(randNum < 0.25){\n        xDelta += randOffset;\n      }else if(randNum > 0.25 && randNum < 0.5){\n        xDelta -= randOffset;\n      }\n    }\n\n    let squaredDeltaX = Math.pow(xDelta, 2);\n    let squaredDeltaY = Math.pow(yDelta, 2);\n    let totalDeltasquared = squaredDeltaX + squaredDeltaY;\n    let totalDelta = Math.sqrt(totalDeltasquared);\n\n    let proportion = 5 / totalDelta;\n    let xVel = xDelta * proportion;\n    let yVel = yDelta * proportion;\n\n    return [xVel, yVel];\n  }\n\n\n  // ------------------------------------------------------------\n\n  jump(){\n    this.yVel -= 5;\n  }\n\n  moveRight(){\n    this.xVel += 2;\n    if(this.xVel > 5){\n      this.xVel = 5;\n    }\n  }\n\n  moveLeft() {\n    this.xVel -= 2;\n    if (this.xVel < -5) {\n      this.xVel = -5;\n    }\n\t}\n  // ------------------------------------------------------------\n\n\tdraw(context){\n    context.fillStyle = 'red';\n    context.fillRect(\n      this.xPos, this.yPos, this.width, this.height\n    );\n  }\n\n  action(){\n    this.move();\n    this.fetchHumanPosition();\n    if(this.alive){\n      this.switchDirection();\n      this.collidedWithProjectiles();\n    }\n  }\n\n  move(){\n    if(!this.alive){\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n    }else{\n      this.yPos += this.yVel;\n      this.xPos += this.xVel;\n      if(this.collidedWithFloor() !== true){\n        this.yVel += this.CONSTANTS.GRAVITY;\n        this.yVel -= this.CONSTANTS.JETPACK;\n      }\n      if(this.xVel > 0 && this.collidedWithFloor()){\n        this.xVel -= 0.1;\n      } else if (this.xVel < 0 && this.collidedWithFloor()){\n        this.xVel += 0.1;\n      }\n    }\n    if(this.human.xPos >= 800){\n      if(this.xVel <= 0){\n        this.xPos -= 1;\n      }\n    }else if(this.human.xPos <= 300){\n      if (this.human.xPos <= 300){\n        this.xPos += 1;\n      }\n    }\n  }\n  // ------------------------------------------------------------\n  animate(context){\n    this.action();\n    this.draw(context);\n    if(Object.values(this.projectiles).length > 0){\n      Object.values(this.projectiles).forEach((p) => {\n        if(p.homing === true){\n          let pos = {x: this.human.xPos, y: this.human.yPos};\n          p.animate(context, ...this.configureProjectile(pos, true));\n        }else{\n          p.animate(context);\n        }\n      });\n    }\n    // this.projectiles = this.projectiles.filter(p => p.xPos < 1110 && p.xPos > -10 && p.yPos > -10 && p.yPos < 410);\n    Object.values(this.projectiles).forEach((p) => {\n      if (!(p => p.xPos < 1110 && p.xPos > -10 && p.yPos > -10 && p.yPos < 710)){\n        delete this.projectiles[p.id];\n      }\n    });\n  }\n  // ------------------------------------------------------------\n  collidedWithFloor(){\n    if(this.yPos >= this.environment.height - 13){\n      this.yVel = 0;\n      return true;\n    }\n  }\n\n  collide(obj1, obj2){\n    // let obj1TopLeft = {x : obj1.xPos, y: obj1.yPos};\n    // let obj1TopRight = { x: obj1.xPos + obj1.width, y: obj1.yPos };\n    // let obj1BotLeft = { x: obj1.xPos, y: obj1.yPos + obj1.height };\n    // let obj1BotRight = { x : obj1.xPos + obj1.width, y : obj1.yPos + obj1.height};\n\n    let obj1Diag = Math.sqrt(Math.pow(obj1.width / 2, 2) + Math.pow(obj1.height / 2, 2)) / 2;\n\n    // let obj2TopLeft = {x : obj2.xPos, y : obj2.yPos};\n    // let obj2TopRight = { x: obj2.xPos + obj2.width, y: obj2.yPos };\n    // let obj2BotLeft = { x: obj2.xPos, y: obj2.yPos + obj2.height };\n    // let obj2BotRight = {x : obj2.xPos + obj2.width, y : obj2.yPos + obj2.height};\n\n    let obj2Diag = Math.sqrt(Math.pow(obj2.width / 2, 2) + Math.pow(obj2.height / 2, 2)) / 2;\n\n    let totalDelta = Math.sqrt(Math.pow(obj1.xPos - obj2.xPos, 2) + Math.pow(obj1.yPos - obj2.yPos, 2));\n    \n    // if((obj1TopLeft.x < obj2BotRight.x && obj1TopLeft.y < obj2BotRight.y) &&\n    //   (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // } else if (obj1TopRight.x > obj2BotLeft.x && obj1TopRight.y > obj2BotLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // } else if (obj1BotRight.x > obj2TopLeft.x && obj1BotRight.y > obj2TopLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // } else if (obj1BotLeft.x < obj2TopRight.x && obj1BotLeft.y > obj2TopRight.y && (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // }else{\n    //   return false;\n    // }\n    \n    \n    if(obj1Diag + obj2Diag + 10 > totalDelta){\n      return true;\n    }else{\n      return false;\n    }\n\n  }\n\n  collidedWithProjectiles(){\n    Object.values(this.human.projectiles).forEach((hp) => {\n      if(this.collide(this, hp)){\n        hp.didHit = true;\n        this.alive = false;\n        this.additionalScore += 1;\n        return true;\n      }\n    });\n  }\n\n\n}","\n\nexport default class Score{\n  constructor(context, initScore=0){\n    this.xPos = 1050;\n    this.yPos = 100;\n    this.score = initScore;\n\n    this.context = context;\n  }\n\n  animate(){\n    this.draw();\n  }\n\n  draw(){\n    this.context.font = \"20px Arial\";\n    this.context.fillText(this.score, this.xPos, this.yPos);\n  }\n}","\n\nexport default class LandComputer{\n  constructor(environment, context, human){\n    this.environment = environment;\n    this.context = context;\n    this.human = human;\n\n    let randNum = Math.random();\n    if(randNum > 0.5){\n      this.xPos = -500;\n      // this.baseXvel = 5;\n      this.goingRight = true;\n      this.goingLeft = false;\n      this.xVel = 3;\n    }else{\n      this.xPos = 1800;\n      // this.baseXvel = -5;\n      this.goingLeft = true;\n      this.goingRight = false;\n      this.xVel = -3;\n    }\n    \n    this.getCurrentPlatform();\n    this.yPos = this.curPlat.yStart;\n    this.yVel = 0;\n    this.CONSTANTS = {\n      GRAVITY: 0.5,\n    };\n\n    this.height = 30;\n    this.width = 30;\n    this.projectiles = {};\n    this.alive = true;\n    this.additionalScore = 0;\n    this.curPlat = null;\n    this.nextPlat = null;\n    this.jumping = true;\n    this.jumpingYVel = 8;\n  }\n\n  animate(context){\n    this.action();\n    this.draw(context);\n    Object.values(this.projectiles).forEach((p) => {\n      p.animate(context);\n    });\n    this.filterProjectiles();\n  }\n\n  action(){\n    this.move();\n    // this.fetchHumanPosition();\n    if(this.alive){\n      this.collidedWithProjectiles();\n    }\n  }\n\n  draw(context){\n    context.fillStyle = 'purple';\n    context.fillRect(this.xPos, this.yPos, this.width, this.height);\n  }\n\n  move(){\n    debugger;\n    this.getCurrentPlatform();\n    if(!this.alive){\n      debugger;\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n      return;\n      // this.xPos += this.xVel;\n    }\n    this.switchDirections();\n    if(this.curPlat && !this.jumping){\n      debugger;\n      this.yPos = this.curPlat.yStart - this.height;\n      this.xPos += this.xVel;\n    }\n    if(this.isOnEdge()){\n      debugger;\n      this.beginJump();\n      debugger;\n      this.jumping = true;\n      this.xPos += this.xVel;\n      this.yPos += this.yVel;\n      this.yVel += this.CONSTANTS.GRAVITY;\n    }\n    // if you have jumped already\n    if(this.jumping){\n      debugger;\n      // if you have jumped, your yVel is downward, and your ypos is on floor, then land\n      if (this.curPlat && this.yPos >= this.curPlat.yStart - this.height && this.yVel > 0){\n        debugger;\n        this.jumping = false;\n        this.yPos = this.curPlat.yStart - this.height;\n        this.yVel = 0;\n        this.xPos += this.xVel;\n      // if you are still midjump\n      }else{\n        debugger;\n        this.xPos += this.xVel;\n        this.yPos += this.yVel;\n        this.yVel += this.CONSTANTS.GRAVITY;\n      }\n    }\n  }\n\n  switchDirections(){\n    if (this.goingRight && this.human.xPos < this.xPos - 500) {\n      this.goingLeft = true;\n      this.goingRight = false;\n      this.xVel = -3;\n    } else if (this.goingLeft && this.human.xPos > this.xPos + 500){\n      this.goingRight = true;\n      this.goingLeft = false;\n      this.xVel = 3;\n    }\n  }\n\n  isOnEdge(){\n    if(this.goingLeft){\n      if(this.curPlat\n        && this.yPos === this.curPlat.yStart - this.height\n        && this.xPos <= this.curPlat.xStart + 20){\n          return true;\n      }\n    }else if(this.goingRight){\n      if(this.curPlat\n        && this.yPos === this.curPlat.yStart - this.height\n        && this.xPos >= this.curPlat.xStart + this.curPlat.width - this.width - 10){\n          return true;\n      }\n    }\n    return false;\n  }\n\n  beginJump2(){\n    // set local vars for curPlat and nextPlat\n    let curPlat = this.curPlat;\n    let curPlatIdx = this.environment.platforms.indexOf(curPlat);\n    let nextPlat = this.nextPlat;\n    // debugger;\n    // heightDiff is height to be jumped\n    // maxJumpHeight is lower plat + max height of jump, in context of canvas dimensions\n    let heightDiff = Math.abs(curPlat.yStart - nextPlat.yStart) * 1.3;\n    // set min jump height\n    if(heightDiff < 25) heightDiff = 25;\n    // set max jump height on canvas dimensions according to which plat is lower\n    let maxJumpHeight = (curPlat.yStart < nextPlat.yStart)\n      ? curPlat.yStart + heightDiff : nextPlat.yStart + heightDiff;\n      // gap btw platforms\n    let xGap = this.goingRight\n      // ? nextPlat.xStart - (curPlat.xStart + curPlat.width)\n      ? nextPlat.xStart - this.xPos\n      : this.xPos - (nextPlat.xStart + nextPlat.width);\n    // time jump will take from takeoff to land, in seconds\n    let jumpTime = (xGap / this.xVel);\n    // let jumpTime = (xGap < heightDiff) ? (heightDiff / this.jumpingYVel) : (xGap / this.xVel);\n\n\n    // in numSteps number of moves, yVel must go from x to 0\n    let halfway = xGap / 2;\n    let numSteps = halfway / this.xVel;\n\n    // fallingDist is the distance that the comp will fall after yvel is 0\n    // the minimum vertical distance is has to travel btw maxima and plat\n\n\n\n    let initYVel = (0 + (0.5) * numSteps) * (-1);\n    this.yVel = initYVel;\n    // debugger;\n    // starting y velocity will need to be such that when the computer reaches the maximum of the jump parabola,\n    // its y velocity will have decreased to zero due to gravity\n  }\n\n  beginJump(){\n    let startX = this.xPos;\n    let startY = this.curPlat.yStart;\n    let endY = this.nextPlat.yStart;\n\n    let endX;\n    if(this.goingRight){\n      endX = this.nextPlat.xStart + 10;\n    }else if(this.goingLeft){\n      endX = this.nextPlat.xStart + this.nextPlat.width - this.width - 10;\n    }\n\n    let xDiff = Math.abs(endX - startX);\n    \n    // steps steps first half, steps steps second half\n    let dist, steps, yvel = this.calculateFall(xDiff / 2);\n\n    let yVertex = this.nextPlat + dist;\n\n    if(this.curPlat.yStart >= this.nextPlat.yStart){\n      this.yVel = yvel * (-1);\n    } else if (this.curPlat.yStart < this.nextPlat.yStart){\n      this.maxHeight = this.nextPlat + dist;\n      this.yVel = this.calculateRise(steps, yVertex);\n    }\n\n  }\n\n  calculateRise(steps, maxHeight){\n    let roundedSteps = Math.round(steps);\n    let count = 0;\n    for(let i = 1; i <= roundedSteps; i++){\n      count += i;\n    }\n    // maxHeight = roundedSteps(initYvel) - count(grav)\n    let initYvel = (maxHeight + (count * 0.5)) / roundedSteps;\n    return initYvel;\n  }\n\n  calculateFall(xDiff){\n    let steps = Math.round(xDiff / this.xVel);\n    let yVel = 0;\n    let dist = 0;\n    for(let i = 0; i < steps; i++){\n      dist += yVel;\n      yVel += this.CONSTANTS.GRAVITY;\n    }\n    return [dist, steps, yVel];\n  }\n\n  // edited getCurrentPlatform so that it sets this.curPlat to null if the comp is not above a platform,\n  // before it would only set new platforms, not set null for no platforms\n  // p.s. never use forEach, it sucks\n  getCurrentPlatform(){\n    // this.environment.platforms.forEach((platform) => {\n    //   if(this.xPos > platform.xStart && this.xPos < platform.xStart + platform.width){\n    //     this.curPlat = platform;\n    //   }\n    // });\n    for(let i = 0; i < this.environment.platforms.length; i++){\n      let platform = this.environment.platforms[i];\n      if(this.xPos > platform.xStart && (this.xPos < platform.xStart + platform.width)){\n        this.curPlat = platform;\n        if(this.goingLeft){\n          this.nextPlat = this.environment.platforms[i - 1];\n        }else if(this.goingRight){\n          this.nextPlat = this.environment.platforms[i + 1];\n        }\n        return;\n      }\n    }\n    this.curPlat = null;\n    this.nextPlat = null;\n  }\n\n  filterProjectiles(){\n    Object.values(this.projectiles).forEach((p) => {\n      if (!(p => p.xPos < 1110 && p.xPos > -10 && p.yPos > -10 && p.yPos < 710)) {\n        delete this.projectiles[p.id];\n      }\n    });\n  }\n\n  collidedWithProjectiles(){\n    Object.values(this.human.projectiles).forEach((hp) => {\n      if (this.collide(this, hp)) {\n        hp.didHit = true;\n        this.alive = false;\n        this.additionalScore += 1;\n        return true;\n      }\n    });\n  }\n\n  collide(obj1, obj2) {\n    // let obj1TopLeft = {x : obj1.xPos, y: obj1.yPos};\n    // let obj1TopRight = { x: obj1.xPos + obj1.width, y: obj1.yPos };\n    // let obj1BotLeft = { x: obj1.xPos, y: obj1.yPos + obj1.height };\n    // let obj1BotRight = { x : obj1.xPos + obj1.width, y : obj1.yPos + obj1.height};\n\n    let obj1Diag = Math.sqrt(Math.pow(obj1.width / 2, 2) + Math.pow(obj1.height / 2, 2)) / 2;\n\n    // let obj2TopLeft = {x : obj2.xPos, y : obj2.yPos};\n    // let obj2TopRight = { x: obj2.xPos + obj2.width, y: obj2.yPos };\n    // let obj2BotLeft = { x: obj2.xPos, y: obj2.yPos + obj2.height };\n    // let obj2BotRight = {x : obj2.xPos + obj2.width, y : obj2.yPos + obj2.height};\n\n    let obj2Diag = Math.sqrt(Math.pow(obj2.width / 2, 2) + Math.pow(obj2.height / 2, 2)) / 2;\n\n    let totalDelta = Math.sqrt(Math.pow(obj1.xPos - obj2.xPos, 2) + Math.pow(obj1.yPos - obj2.yPos, 2));\n\n    // if((obj1TopLeft.x < obj2BotRight.x && obj1TopLeft.y < obj2BotRight.y) &&\n    //   (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // } else if (obj1TopRight.x > obj2BotLeft.x && obj1TopRight.y > obj2BotLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // } else if (obj1BotRight.x > obj2TopLeft.x && obj1BotRight.y > obj2TopLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // } else if (obj1BotLeft.x < obj2TopRight.x && obj1BotLeft.y > obj2TopRight.y && (obj1Diag + obj2Diag > totalDelta)){\n    //   return true;\n    // }else{\n    //   return false;\n    // }\n\n\n    if (obj1Diag + obj2Diag + 10 > totalDelta) {\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n}","import \"./styles/index.scss\";\n\nimport Game from './game';\n\nconst canvas = document.getElementById('main-canvas');\nconst game = new Game(canvas);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  game.restart();\n});\n\n","import Environment from \"./environment\";\nimport Human from './human';\nimport Background from \"./background\";\nimport Computer from \"./computer\";\nimport Score from \"./score\";\nimport LandComputer from \"./land_computer\";\n\n\nexport default class Game{\n  constructor(canvas){\n    this.context = canvas.getContext('2d');\n    this.dimensions = {\n      height: canvas.height,\n      width: canvas.width\n    };\n    this.running = false;\n\n    this.computers = [];\n    this.computersBeingAdded = 0;\n    this.numComputers = this.computers.length + this.computersBeingAdded;\n\n    this.humanProjectiles = [];\n    this.computerProjectiles = [];\n\n    this.allProjectiles = {};\n\n    this.startMenu = document.getElementById('start-menu');\n    this.playButton = document.getElementById('play-button');\n    this.playButton.addEventListener('mousedown', () => {\n      document.getElementById('start-menu').remove();\n      this.click();\n    });\n\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  // if computer players are offscreen, that means theyre no longer alive, and dont need to be\n  // in the game's computers list, and they dont need to be rendered\n  filterComputers(){\n    this.computers = this.computers.filter(c => c.yPos < 10000);\n  }\n\n  switchRounds(){\n    if(this.human.distanceCovered > 100){\n      this.background.round = 1;\n    }\n  }\n\n  \n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n\n\n  setNumComputers(){\n    this.numComputers = this.computers.length + this.computersBeingAdded;\n  }\n\n  spawnComputer(){\n    this.computersBeingAdded += 1;\n    let newCompStartX;\n    let randNum = Math.random();\n    if(randNum <= 0.5){\n      newCompStartX = 1150;\n    }else{\n      newCompStartX = -50;\n    }\n    window.setTimeout(() => {\n      this.computers.push(\n        new Computer(this.environment, this.context, this.human, newCompStartX)\n      );\n      this.computersBeingAdded -= 1;\n    }, 5000);\n  }\n\n  setPlayerTracking(){\n    this.computers.forEach((comp) => {\n      Object.values(comp.projectiles).forEach((proj) => {\n        proj.playerXVel = this.human.xVel;\n        proj.playerXPos = this.human.xPos;\n        proj.playerYPos = this.human.yPos;\n      });\n    });\n  }\n\n  sendEnemyProjectiles(){\n    this.computers.forEach((comp) => {\n      Object.values(comp.projectiles).forEach((projectile) => {\n        this.human.computerProjectiles[projectile.id] = projectile;\n      });\n    });\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  addEnemyScore(){\n    let that = this;\n    this.computers.forEach((comp) => {\n      that.score.score += comp.additionalScore;\n      comp.additionalScore = 0;\n    });\n  }\n\n  addProjectiles(){\n    this.allProjectiles = this.human.projectiles;\n    for(let i = 0; i < this.computers.length; i++){\n      let curComp = this.computers[i];\n      this.allProjectiles = Object.assign(this.allProjectiles, curComp.projectiles);\n    }\n  }\n\n  animate(){\n\n    // this.filterComputers();\n    this.sendEnemyProjectiles();\n\n    this.background.animate(this.context);\n    this.environment.animate(this.context);\n    this.human.animate(this.context);\n    this.score.animate();\n\n    this.setPlayerTracking();\n\n    this.computers.forEach((c) => {\n      c.animate(this.context);\n    });\n    this.landComp.animate(this.context);\n\n    this.setNumComputers();\n\n    if(this.numComputers < 4){\n      this.spawnComputer();\n    }\n\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  restart(){\n    // debugger;\n    this.background = new Background(this.dimensions);\n    this.environment = new Environment(this.dimensions, this.context);\n    this.human = new Human(this.environment, this.context, this.computerProjectiles);\n    this.score = new Score(this.context);\n    this.environment.human = this.human;\n    this.computers = [];\n    let i = 1;\n    let compStartX;\n    while(i < 6){\n      if(i % 2 === 0){\n        compStartX = 1150 + (100 * i);\n      }else{\n        compStartX = -50 - (100 * i);\n      }\n      this.computers.push(new Computer(this.environment, this.context, this.human, compStartX));\n      i += 1;\n    }\n    this.landComp = new LandComputer(this.environment, this.context, this.human);\n    this.running = false;\n\n    // this.step();\n\n    this.run();\n  }\n\n  // this will be run upon restart\n  run(){\n    // debugger;\n  }\n\n  click(){\n    // debugger;\n    if(!this.running){\n      this.play();\n    }\n  }\n\n  play(){\n    // debugger;\n    this.running = true;\n    this.step();\n  }\n\n  step(){\n      // debugger;\n    // this.addProjectiles();\n    if(this.gameOver()){\n      this.rerun();\n    }\n    this.animate();\n    this.addEnemyScore();\n    this.filterComputers();\n    if(this.running){\n      window.requestAnimationFrame(this.step.bind(this));\n    }\n  }\n\n  gameOver(){\n    // debugger;\n    if(this.human.yPos > 710){\n      // debugger;\n      return true;\n    }else if(!this.human.alive && this.human.yPos > 710){\n      // debugger;\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n  rerun(){\n    // debugger;\n    let gameAndTitle = document.getElementById('game-and-title');\n    gameAndTitle.appendChild(this.startMenu);\n    // debugger;\n    this.restart();\n  }\n\n\n\n\n\n\n\n\n}\n\n"],"sourceRoot":""}