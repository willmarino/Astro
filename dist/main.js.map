{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/platform.js","webpack:///./src/powerups/shield.js","webpack:///./src/util/search.js","webpack:///./src/environment.js","webpack:///./src/projectile.js","webpack:///./src/powerups/shield_attachement.js","webpack:///./src/human.js","webpack:///./src/background.js","webpack:///./src/computer.js","webpack:///./src/score.js","webpack:///./src/land_computer.js","webpack:///./src/dynamic_computer.js","webpack:///./src/util/collision_logic.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Platform","xStart","yStart","width","height","id","this","powerups","shrinking","prev","next","context","fillStyle","fillRect","values","length","draw","x","y","move","Shield","xPos","yPos","platform","didHit","type","health","present","beginPath","arc","Math","PI","fill","stroke","closePath","furthestRightPlatform","platforms","platformsArr","furthest","cur","Environment","dimensions","human","powerupsCount","platformCount","generatePlatforms","head","tail","firstPlat","lastPlat","newYStart","generatePlatformYStart","newPlat","generatePlatformGap","generatePlatformWidth","generatePowerup","Search","action","forEach","that","xVel","plat","addPlatform","newHead","newTail","newPlatWidth","random","newShield","keys","randHeight","prevPlatHeight","max","randomOffset","round","Projectile","player","projectileXVel","projectileYVel","homing","owner","playerXVel","playerXPos","playerYPos","yVel","alive","projectileCount","homingMove","homingDraw","computerProjectileMove","humanProjectileMove","ShieldAttachment","radius","Human","environment","computerProjectiles","CONSTANTS","GRAVITY","NORMALFORCE","projectiles","jumping","additionalScore","curJumps","dashes","onFloor","curPlat","movingLeft","movingRight","goingDown","distanceCovered","shielded","shield","setClick","allBinds","animate","applyGravity","getCurrentPlatform","isPlayerOnSide","bindLeft","bindRight","bindUndoRight","bindUndoLeft","bindDown","bindUndoDown","bindDash","bindUseShield","bindJump","window","addEventListener","e","moveLeft","moveRight","jump","down","setTimeout","useShield","canvas","rect","getBoundingClientRect","pos","clientX","left","clientY","top","newProj","configureProjectile","newId","assign","xDelta","yDelta","totalDeltasquared","pow","proportion","sqrt","hasShield","Background","colors","Computer","JETPACK","humanProjectiles","canShoot","initiateShot","setInterval","shoot","randNum","projectile","randOffset","squaredDeltaX","squaredDeltaY","totalDelta","switchDirection","Score","initScore","score","font","fillText","LandComputer","nextPlat","goingRight","goingLeft","mid","right","switchDirections","isOnEdge","beginJump","endX","startX","xDiff","abs","obj","calculateFall","dist","steps","maxHeight","calculateRise","roundedSteps","count","newProjectile","DynamicComputer","moving","stepNum","configureProjectiles","num","totalVel","balancedVel","xConfig","configure","yConfig","startPos","upperBound","lowerBound","isPlayerOnEdge","movement","configuringMove","configureMove","onScreen","collide","obj1","obj2","objectCollision","isComputer","Game","getContext","roundVals","computerCount","landComputerCount","computers","landComputers","dynamicComputers","computersBeingAdded","numComputers","dynamicComputersBeingAdded","numdynamicComputers","landComputersBeingAdded","numLandComputers","canSpawnComp","canSpawnDynComp","canSpawnLandComp","landComputerProjectiles","dynamicComputerProjectiles","allPowerups","projectileOffset","startMenu","document","getElementById","playButton","gameAndTitle","grabAll","checkCollisions","deleteAllProjectiles","sendDownProjectiles","deleteProjectiles","sendDown","powerupsArr","platId","comps","projectilesArr","compId","powersArr","offScreen","grabHumanProjectiles","grabComputerProjectiles","grabPowerups","grabFrom","compsArr","CollisionUtil","newPowerup","didPlayerHit","homingProjectiles","filter","hp","objects","objectsArr","el","filterHelper","arr","background","newLandComp","console","log","newCompStartX","newComp","newDynamicComp","compStartX","j","k","createInitialComputers","removeChild","step","filterProjectiles","filterComputers","switchRounds","setNumComputers","setNumDynamicComputers","setNumLandComputers","spawnComputer","spawnDynamicComputer","spawnLandComputer","gameOver","appendChild","requestAnimationFrame","animateProjectiles","comp","dc","restart"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\n\nexport default class Platform{\n  constructor(xStart, yStart, width, height, id){\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.width = width;\n    this.height = height;\n    this.powerups = {};\n    this.shrinking = false;\n    this.id = id;\n\n    this.prev = null;\n    this.next = null;\n    \n  }\n\n  draw(context) {\n    context.fillStyle = 'black';\n    context.fillRect(this.xStart, this.yStart, this.width, this.height);\n\n    for(let i = 0; i < Object.values(this.powerups).length; i++){\n      let curPowerup = Object.values(this.powerups)[i];\n      curPowerup.draw(context);\n    }\n  }\n\n  move(x, y){\n    this.xStart += x;\n    this.yStart += y;\n    for(let i = 0; i < Object.values(this.powerups).length; i++){\n      let curPowerup = Object.values(this.powerups)[i];\n      curPowerup.move(x, y);\n    }\n  }\n\n  shrink(x){\n    this.width -= x;\n  }\n\n}","export default class Shield{\n  constructor(xPos, yPos, id, platform){\n    this.didHit = false;\n    this.type = 'shield';\n    this.xPos = xPos;\n    this.yPos = yPos - 10;\n    this.health = 3;\n    this.id = id;\n    this.platform = platform;\n    this.width = 10;\n    this.height = 10;\n    this.present = true;\n  }\n\n  animate(context, x, y){\n    this.draw(context);\n    this.move(x, y);\n  }\n\n  move(x, y){\n    this.xPos += x;\n    this.yPos += y;\n  }\n\n  draw(context){\n    context.beginPath();\n    context.arc(this.xPos, this.yPos, 8, 0, 2 * Math.PI);\n    context.fillStyle = 'green'\n    context.fill();\n    context.stroke();\n    context.closePath();\n    // context.fillStyle = 'green';\n\n  }\n}","\n// takes in object of platforms, returns that platform which is 'last', which is furthest right\n// this is O(n)\nexport const furthestRightPlatform = (platforms) => {\n  let platformsArr = Object.values(platforms);\n\n  // let furthest = {id: null, xStart: null};\n  let furthest = null\n  for(let i = 0; i < platformsArr.length; i++){\n    let cur = platformsArr[i];\n    if(!furthest || cur.xStart > furthest.xStart){\n      furthest = cur;\n    }\n  }\n  return furthest;\n}\n\nexport const furthestLeftPlatform = (platforms) => {\n  let platformsArr = Object.values(platforms);\n  // let furthest = {id: null, xStart: null};\n  let furthest = null;\n  for(let i = 0; i < platformsArr.length; i++){\n    let cur = platformsArr[i];\n    // if(!furthest || cur.xStart < furthest.xStart){\n    //   furthest = cur;\n    // }\n    if(!furthest){\n      furthest = cur;\n    }else if(cur.xStart < furthest.xStart){\n      furthest = cur;\n    }\n  }\n  return furthest;\n}","import Platform from \"./platform\";\nimport Shield from \"./powerups/shield\";\nimport * as Search from './util/search';\n\nexport default class Environment{\n  constructor(dimensions, context, human=null){\n    this.dimensions = {\n      height: dimensions.height,\n      width: dimensions.width\n    };\n    this.context = context;\n\n    this.height = 300;\n\n    this.powerupsCount = 0;\n    this.platformCount = 0;\n    this.powerups = {};\n    this.platforms = {};\n    this.generatePlatforms();\n\n    this.human = human;\n\n    this.head;\n    this.tail;\n  }\n  // change from checking last platform in array to know if we need to generate more,\n  // switch to checking the one with the highest id, which is the max of the keys of platform\n  generatePlatforms(){\n    let firstPlat = new Platform(-1360, 550, 600, 15, this.platformCount);\n\n    this.head = firstPlat;\n    this.tail = firstPlat;\n\n    this.platformCount += 1;\n    this.platforms[firstPlat.id] = firstPlat;\n\n    let lastPlat = firstPlat;\n\n      while(lastPlat.xStart + lastPlat.width < 2000){\n        let newYStart = this.generatePlatformYStart();\n        if(newYStart - lastPlat.yStart > 50){\n          newYStart = lastPlat.yStart + 50;\n        }\n        let newPlat = new Platform(\n          lastPlat.xStart + lastPlat.width + this.generatePlatformGap(),\n          newYStart,\n          this.generatePlatformWidth(),\n          15,\n          this.platformCount\n        );\n\n        newPlat.prev = this.tail;\n        this.tail.next = newPlat;\n        this.tail = newPlat;\n\n        this.platformCount += 1;\n        this.platforms[newPlat.id] = newPlat;\n        this.generatePowerup(newPlat);\n        lastPlat = Search.furthestRightPlatform(this.platforms);\n      }\n  }\n\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n\n  animate(context){\n    this.draw(context);\n    this.action();\n  }\n\n  action(){\n    this.move();\n  }\n\n  draw(context){\n    Object.values(this.platforms).forEach((p) => {\n      p.draw(context);\n    });\n  }\n\n  move(){\n    let that = this;\n    if(this.human.xPos >= 800 && this.human.xVel > 0){\n      Object.values(this.platforms).forEach((plat) => {\n        plat.move(that.human.xVel * (-1), 0);\n      });\n    }else if(this.human.xPos <= 300 && this.human.xVel < 0){\n      Object.values(this.platforms).forEach((plat) => {\n        plat.move(this.human.xVel * (-1), 0);\n      });\n    }\n    this.addPlatform();\n  }\n\n  addPlatform(){\n    // let firstPlat = Search.furthestLeftPlatform(this.platforms);\n    // let prevPlat = Search.furthestRightPlatform(this.platforms);\n    if(this.head.xStart < -1450){\n\n      let newHead = this.head.next;\n      this.head.next.prev = null;\n      delete this.platforms[this.head.id]; //delete head\n      this.head = newHead;\n\n      let newPlat = new Platform(\n        this.tail.xStart + this.tail.width + this.generatePlatformGap(),\n        this.generatePlatformYStart(),\n        this.generatePlatformWidth(),\n        15,\n        this.platformCount\n      );\n\n      this.tail.next = newPlat;\n      newPlat.prev = this.tail;\n      this.tail = newPlat;\n\n      this.platformCount += 1;\n      this.platforms[newPlat.id] = newPlat;\n      this.generatePowerup(newPlat);\n\n    }else if(this.tail.xStart > 1300){\n\n      let newTail = this.tail.prev;\n      this.tail.prev.next = null;\n      delete this.platforms[this.tail.id];\n      this.tail = newTail;\n\n      let newPlatWidth = this.generatePlatformWidth();\n      // let nextPlat = firstPlat;\n      let newPlat = new Platform(\n          this.head.xStart - this.generatePlatformGap() - newPlatWidth,\n          this.generatePlatformYStart(),\n          newPlatWidth,\n          15,\n          this.platformCount\n      );\n      \n      this.head.prev = newPlat;\n      newPlat.next = this.head;\n      this.head = newPlat;\n\n      this.platformCount += 1;\n      this.platforms[newPlat.id] = newPlat;\n      this.generatePowerup(newPlat);\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n\n\n  generatePowerup(newPlat){\n    let randNum = Math.random();\n    if(randNum <= 1){\n      let newShield = new Shield(\n        newPlat.xStart + (Math.random() * newPlat.width),\n        newPlat.yStart - 10,\n        this.powerupsCount,\n        newPlat\n      )\n      this.powerupsCount += 1;\n      newPlat.powerups[newShield.id] = newShield;\n    }\n  }\n\n  generatePlatformYStart(){\n    if(Object.keys(this.platforms).length === 0){\n      return 550;\n    }else{\n      let lastPlat = this.platforms[Math.max(...Object.keys(this.platforms))];\n      let prevPlatHeight = lastPlat.yStart;\n      let randomOffset = Math.round(Math.random() * 150);\n      if(randomOffset < 30){\n        randomOffset = 50;\n      }\n      let randHeight;\n      if(Math.random() < 0.5){\n        randHeight = prevPlatHeight + randomOffset;\n      }else{\n        randHeight = prevPlatHeight - randomOffset;\n      }\n      if(randHeight < 450){\n        randHeight = 450;\n      }else if(randHeight > 625){\n        randHeight = 625;\n      }\n      return randHeight;\n    }\n  }\n\n  generatePlatformWidth(){\n    let randomOffset = Math.round(Math.random() * 200);\n    let randNum = Math.random();\n    if(randNum < .5){\n      return 400 + randomOffset;\n    }else{\n      return 400 - randomOffset;\n    }\n  }\n\n  generatePlatformGap(){\n    return Math.round(Math.random() * 100) + 100;\n  }\n\n}","\n\nexport default class Projectile{\n  constructor(player, projectileXVel, projectileYVel, homing=false, human=null){\n    this.player = player;\n    this.homing = homing;\n\n    this.human = human;\n    this.owner = player.type;\n    this.context = player.context;\n\n    this.didHit = false;\n\n    this.playerXVel = player.xVel;\n    this.playerXPos = player.xPos;\n    this.playerYPos = player.yPos;\n\n    this.xPos = player.xPos + (player.width / 2);\n    this.yPos = player.yPos + (player.width / 2);\n    this.xVel = projectileXVel;\n    this.yVel = projectileYVel;\n    if(player.type === 'human'){\n      this.width = 5;\n      this.height = 5;\n    }else{\n      if(homing){\n        this.width = 15;\n        this.height = 15;  \n      }else{\n        this.width = 5;\n        this.height = 5;\n      }\n    }\n    this.health = 1;\n    this.alive = true;\n    this.id = player.projectileCount;\n  }\n  \n  animate(context, xVel=null, yVel=null){\n    if(this.owner === 'computer'){\n      if(this.homing === true){\n        this.homingMove(xVel, yVel);\n        this.homingDraw(context);\n      }else{\n        this.computerProjectileMove();\n        this.draw(context);\n      }\n    }else{\n      this.humanProjectileMove();\n      this.draw(context);\n    }\n  }\n  \n  humanProjectileMove(){\n    if((this.playerXPos >= 800 && this.playerXVel >= 0)){\n      this.xPos += this.xVel;\n      if(this.owner === 'computer'){\n        this.xPos -= (this.playerXVel / 2);\n      }\n      this.yPos += this.yVel;\n    } else if ((this.playerXPos <= 300 && this.playerXVel <= 0)){\n      this.xPos += this.xVel;\n      if(this.owner === 'computer'){\n        this.xPos -= (this.playerXVel / 2);\n      }\n      this.yPos += this.yVel;\n    }else{\n      this.xPos += this.xVel;\n      this.yPos += this.yVel;\n    }\n  }\n\n  computerProjectileMove(){\n    if((this.human.xPos >= 800 && this.human.xVel >= 0)){\n      this.xPos += this.xVel;\n      if(this.owner === 'computer'){\n        this.xPos -= (this.human.xVel / 2);\n      }\n      this.yPos += this.yVel;\n    } else if ((this.human.xPos <= 300 && this.human.xVel <= 0)){\n      this.xPos += this.xVel;\n      if(this.owner === 'computer'){\n        this.xPos -= (this.human.xVel / 2);\n      }\n      this.yPos += this.yVel;\n    }else{\n      this.xPos += this.xVel;\n      this.yPos += this.yVel;\n    }\n  }\n\n  homingMove(xVel, yVel){\n\n    if((this.human.xPos >= 800 && this.human.xVel >= 0)){\n      this.xPos += xVel;\n      if(this.owner === 'computer'){\n        this.xPos -= (this.human.xVel / 2);\n      }\n      this.yPos += yVel;\n    } else if ((this.human.xPos <= 300 && this.human.xVel <= 0)){\n      this.xPos += xVel;\n      if(this.owner === 'computer'){\n        this.xPos -= (this.human.xVel / 2);\n      }\n      this.yPos += yVel;\n    }else{\n      this.xPos += xVel;\n      this.yPos += yVel;\n    }\n  }\n\n// ---------------------\n  draw(context){\n    if(!this.didHit){\n      if(this.owner === 'human'){\n        context.fillStyle = 'black';\n        context.fillRect(this.xPos, this.yPos, this.width, this.height);  \n      }else{\n        context.fillStyle = 'black';\n        context.fillRect(this.xPos, this.yPos, this.width, this.height);\n      }\n    }\n  }\n\n  homingDraw(context) {\n    if (!this.didHit) {\n      context.fillStyle = 'green';\n      context.fillRect(this.xPos, this.yPos, this.width, this.height);\n    }\n  }\n\n}","\n\nexport default class ShieldAttachment{\n  constructor(human){\n    this.type = 'shield';\n    this.human = human;\n    this.xPos = this.human.xPos;\n    this.yPos = this.human.yPos;\n    this.radius = 20;\n  }\n  animate(context){\n    this.move();\n    this.draw(context);\n  }\n\n  move(){\n    this.xPos = this.human.xPos;\n    this.yPos = this.human.yPos;\n  }\n\n  draw(context){\n    context.beginPath();\n    context.arc(this.xPos + (this.human.width / 2), this.yPos + (this.human.height / 2), this.radius, 0, 2 * Math.PI);\n    context.fillStyle = 'black';\n    // context.fill();\n    context.stroke();\n    context.closePath();\n  }\n}","import Projectile from \"./projectile\";\nimport Shield from \"./powerups/shield\";\nimport ShieldAttachment from \"./powerups/shield_attachement\";\n\nexport default class Human{\n\tconstructor(environment, context, computerProjectiles){\n\t\tthis.type = 'human';\n\n\t\tthis.CONSTANTS = {\n\t\t\tGRAVITY: 0.5,\n\t\t\tNORMALFORCE: -0.5\n\t\t};\n\n\t\tthis.alive = true;\n\t\tthis.projectiles = {};\n\t\tthis.environment = environment;\n\t\tthis.context = context;\n\t\tthis.computerProjectiles = computerProjectiles;\n\t\tthis.jumping = false;\n\t\tthis.projectileCount = 0;\n\n\t\tthis.additionalScore = 0;\n\n\t\tthis.curJumps = 0;\n\t\tthis.dashes = 0;\n\n    this.xPos = 350;\n    this.yPos = 100;\n    this.yVel = 0;\n    this.xVel = 0;\n    this.width = 15;\n\t\tthis.height = 15;\n\t\t\n\t\tthis.onFloor = false;\n\t\tthis.curPlat = null;\n\t\tthis.lastPlat = this.environment.platforms[0];\n\n\t\tthis.movingLeft = false;\n\t\tthis.movingRight = false;\n\t\tthis.goingDown = false;\n\n\t\tthis.distanceCovered = 0;\n\n\t\tthis.powerups = {};\n\t\tthis.shielded = false;\n\t\tthis.shield = null;\n\t\tthis.health = 3;\n\n    this.setClick = this.setClick.bind(this);\n\t\tthis.allBinds();\n\t\t// this.bindLeft();\n\t\t// this.bindRight();\n\t\t// this.bindUndoRight();\n\t\t// this.bindUndoLeft();\n\t\t// this.bindDown();\n\t\t// this.bindUndoDown();\n\t\t// this.bindDash();\n\t\t// this.bindUseShield();\n\n    // this.bindJump();\n    // this.setClick(this);\n\t}\n\t// ----------------------------------------------------------------------------------------------------\n\t// ----------------------------------MAIN---------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\t// ----------------------------------MAIN--------------------------------------------------------------\n\n\n\tanimate(context) {\n\t\tthis.move();\n\t\tthis.draw(context);\n\t\tif(this.shielded){\n\t\t\tthis.shield.animate(context);\n\t\t}\n\t}\n\n\tdraw(context) {\n\t\t// if(this.shielded){\n\t\t// \tthis.shield.draw(context);\n\t\t// }else{\n\t\t// }\n\t\tcontext.fillStyle = 'gray';\n\t\tcontext.fillRect(\n\t\t\tthis.xPos, this.yPos, this.width, this.height\n\t\t);\n\t}\n\n\tmove(){\n\t\t// if player is no longer 'alive', then apply gravity until they fall off screen\n\t\tif(!this.alive){\n\t\t\tthis.applyGravity();\n\t\t\tthis.yPos += this.yVel;\n\t\t\treturn;\n\t\t}\n\n\t\t// check whether or not the player is above a platform, and if so, which platform\n\t\tthis.getCurrentPlatform();\n\n\t\t// if player is above a platform, set jumping flag to false based on velocity and position\n\t\t// if player is not above a platform, set onfloor flag to false\n\t\tif(this.curPlat){\n\t\t\tif(this.yVel > 0 && this.yPos < (this.curPlat.yStart - 20 || this.lastPlat.yStart) ){\n\t\t\t\tthis.jumping = false;\n\t\t\t}\n\t\t}else if(!this.curPlat){\n\t\t\tthis.onFloor = false;\n\t\t}\n\t\t// check whether or not the player is above a platform, and if so, which platform\n\t\tthis.getCurrentPlatform();\n\n\t\t// if player is onfloor and not jumping, reset dashes and jumps, set yPos platform plus player height,\n\t\t// set yVel to zero, and apply horizontal movement based on whether or not player has reached the designated side zones\n\t\tif(this.onFloor && !this.jumping){\n\t\t\tthis.dashes = 0;\n\t\t\tthis.curJumps = 0;\n\t\t\tthis.yPos = this.curPlat.yStart - this.height;\n\t\t\tthis.yVel = 0;\n\t\t\tthis.isPlayerOnSide();\n\t\t// if player is not yet 'onfloor', but is above a platform, check ypos to see whether onfloor flag should be set to true\n\t\t// apply horizontal movement based on whether or not player has reached the designated side zones\n\t\t// whether or not player is above a platform, apply gravity\n\t\t}else if(!this.onFloor){\n\t\t\tif(this.curPlat){\n\t\t\t\tif(this.yPos >= this.curPlat.yStart - this.height && this.yVel >= 0){\n\t\t\t\t\tthis.onFloor = true;\n\t\t\t\t\tthis.isPlayerOnSide();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.yVel += this.CONSTANTS.GRAVITY;\n\t\t\tthis.yPos += this.yVel;\n\t\t\tthis.isPlayerOnSide();\n\t\t// if player is onfloor but jumping, have them leave the floor, circumventing the floor-stick effect\n\t\t}else if(this.onFloor && this.jumping){\n\t\t\tthis.yPos += this.yVel;\n\t\t\tthis.isPlayerOnSide();\n\t\t}\n\t\t// apply friction to player movement to slow them down if no movement keys are being pressed.\n\t\tif(!this.movingLeft && !this.movingRight){\n\t\t\tif(this.xVel > 0){\n\t\t\t\tthis.xVel -= .3;\n\t\t\t}else if(this.xVel < 0){\n\t\t\t\tthis.xVel += .3;\n\t\t\t}\n\t\t}\n\t\t// add change in xPos to total distance covered, will be used to change rounds\n\t\tthis.distanceCovered += this.xVel;\n\t}\n\n\t// if player is at 300 or 800 px, stop horizontal movement to avoid leaving screen and give player\n\t// a view of upcoming obstacles\n\tisPlayerOnSide(){\n\t\tif ((this.xPos >= 800 && this.xVel >= 0) || (this.xPos <= 300 && this.xVel <= 0)) {\n\t\t\tnull;\n\t\t} else {\n\t\t\tthis.xPos += this.xVel;\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\t// ----------------------BASIC UTIL---------------------------------------------------------------\n\tapplyGravity(){\n\t\tthis.yVel += this.CONSTANTS.GRAVITY;\n\t}\n\n\tisInAir(){\n\t\tif(!this.curPlat){\n\t\t\treturn true;\n\t\t}\n\t\tif(this.yPos < (this.curPlat.yStart - this.height)){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tisOnFloor(){\n\t\tif(!this.curPlat){\n\t\t\treturn false;\n\t\t}\n\t\tif(this.yPos > (this.curPlat.yStart - this.curPlat.height)){\n\t\t\tif(this.yPos < (this.curPlat.yStart + 5)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// --------------------------------------------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\t// ----------------------COLLISION LOGIC---------------------------------------------------------------\n\n\tcollidedWithFloor() {\n\t\tif (this.curPlat) {\n\t\t\tif (this.yPos >= this.curPlat.yStart - 10) {\n\t\t\t\tthis.onFloor = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// checks if player xPos is between the left and right edges of any platform('above platform')\n\tgetCurrentPlatform() {\n\t\t// \n\t\t// let that = this;\n\t\tfor (let i = 0; i < Object.values(this.environment.platforms).length; i++) {\n\t\t\tlet plat = Object.values(this.environment.platforms)[i];\n\t\t\tif (this.xPos > plat.xStart && this.xPos < plat.xStart + plat.width && this.yPos < plat.yStart + plat.height) {\n\t\t\t\t\n\t\t\t\tthis.curPlat = plat;\n\t\t\t\tthis.lastPlat = this.curPlat;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tthis.curPlat = null;\n\t\t\t\t// this.onFloor = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS--------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS-------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT BINDS---------------------------------------------------------------------------\n\tallBinds(){\n\t\tthis.bindLeft();\n\t\tthis.bindRight();\n\t\tthis.bindUndoRight();\n\t\tthis.bindUndoLeft();\n\t\tthis.bindDown();\n\t\tthis.bindUndoDown();\n\t\tthis.bindDash();\n\t\tthis.bindUseShield();\n\n    this.bindJump();\n    // this.setClick = this.setClick.bind(this);\n    this.setClick(this);\n\t}\n\n\tbindLeft() {\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif (e.key === 'a' || e.key === 'A') {\n\t\t\t\tthis.moveLeft();\n\t\t\t\tthis.movingLeft = true;\n\t\t\t\tthis.movingRight = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindUndoLeft(){\n\t\twindow.addEventListener('keyup', (e) => {\n\t\t\tif (e.key === 'a' || e.key === 'A') {\n\t\t\t\t// this.moveLeft();\n\t\t\t\tthis.movingLeft = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindRight(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif (e.key === 'd' || e.key === 'D') {\n\t\t\t\tthis.moveRight();\n\t\t\t\tthis.movingRight = true;\n\t\t\t\tthis.movingLeft = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindUndoRight(){\n\t\twindow.addEventListener('keyup', (e) => {\n\t\t\tif (e.key === 'd' || e.key === 'D') {\n\t\t\t\t// this.moveRight();\n\t\t\t\tthis.movingRight = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tbindJump() {\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif (e.key === 'w' || e.key === 'W') {\n\t\t\t\tthis.jump();\n\t\t\t}\n\t\t});\n\t}\n\n\tbindDown(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif(e.key === 's' || e.key === 'S'){\n\t\t\t\tthis.goingDown = true;\n\t\t\t\tthis.down();\n\t\t\t}\n\t\t});\n\t}\n\n\tbindUndoDown(){\n\t\twindow.addEventListener('keyup', (e) => {\n\t\t\tif (e.key === 's' || e.key === 'S') {\n\t\t\t\t// this.down();\n\t\t\t\tthis.goingDown = false;\n\t\t\t}\n\t\t});\n\t}\n\n\t// loop sets five timeouts in order to gradually slow down player after dashing\n\tbindDash(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif(e.key === 'Spacebar' || e.key === ' '){\n\t\t\t\tif(this.dashes > 0){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(this.movingLeft){\n\t\t\t\t\tthis.xVel -= 7.5;\n\t\t\t\t\tthis.dashes += 1;\n\t\t\t\t\tfor(let i = 0; i < 5; i++){\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.xVel += 1.5;\n\t\t\t\t\t\t}, 100 * i)\n\t\t\t\t\t}\n\t\t\t\t}else if(this.movingRight){\n\t\t\t\t\tthis.xVel += 7.5;\n\t\t\t\t\tthis.dashes += 1;\n\t\t\t\t\tfor(let i = 0; i < 5; i++){\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.xVel -= 1.5;\n\t\t\t\t\t\t}, 100 * i)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tbindUseShield(){\n\t\twindow.addEventListener('keypress', (e) => {\n\t\t\tif(e.key === 'r' || e.key === 'R'){\n\t\t\t\tthis.useShield();\n\t\t\t}\n\t\t})\n\t}\n\n\n\n// ----------------------------------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG--------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG-------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n// -------------------------PROJECTILE BIND AND CONFIG---------------------------------------------------------------------------\n\n\t// if player clicks, fetch click coordinates, wrap them in an object, create a projectile with the result\n\t// of passing that object into configureProjectile\n\tsetClick(that) {\n\t\tthis.context.canvas.addEventListener('click', (e) => {\n\t\t\tlet rect = this.context.canvas.getBoundingClientRect();\n\t\t\tlet pos = {};\n\t\t\tpos.x = e.clientX - rect.left;\n\t\t\tpos.y = e.clientY - rect.top;\n\n\t\t\tlet newProj = new Projectile(that, ...that.configureProjectile(pos));\n\t\t\tlet newId = newProj.id;\n\t\t\tthat.projectiles = Object.assign({[newId]: newProj}, that.projectiles);\n\n\t\t\tthis.projectileCount += 1;\n\t\t});\n\t}\n\n\t// calculates the necessary x and y velocities for the projectile(starting at player position)\n\t// to get to the coordinates of the click\n\tconfigureProjectile(pos){\n\t\tlet xDelta = pos.x - this.xPos;\n\t\tlet yDelta = pos.y - this.yPos;\n\n\t\tlet squaredDeltaX = Math.pow(xDelta, 2);\n\t\tlet squaredDeltaY = Math.pow(yDelta, 2);\n\t\tlet totalDeltasquared = squaredDeltaX + squaredDeltaY;\n\t\tlet totalDelta = Math.sqrt(totalDeltasquared);\n\n\t\tlet proportion = 20 / totalDelta;\n\t\tlet xVel = xDelta * proportion;\n\t\tlet yVel = yDelta * proportion;\n\n\t\treturn [xVel, yVel];\n\t}\n\t// ----------------------------------------------------------------------------------------------------\n\t// -------------------------MOVEMENT--------------------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT-------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\t// -------------------------MOVEMENT---------------------------------------------------------------------------\n\n\tjump(){\n\t\tif(this.curJumps < 2){\n\t\t\tthis.onFloor = false;\n\t\t\tthis.jumping = true;\n\t\t\tthis.yVel = -12;\n\t\t\tthis.curJumps += 1;\n\t\t}\n\t}\n\n\tmoveRight(){\n\t\tthis.xVel = 5;\n\t}\n\n\tmoveLeft() {\n\t\tthis.xVel = -5;\n\t}\n\n\tdown(){\n\t\tif(this.goingDown === true){\n\t\t\tthis.yVel += 7;\n\t\t}\n\t}\n\n\tuseShield(){\n\t\tlet shield = this.hasShield();\n\t\tif(shield){\n\t\t\tthis.shielded = true;\n\t\t\tthis.shield = new ShieldAttachment(this);\n\t\t\tdelete this.powerups[shield.id];\n\t\t\twindow.setTimeout(() => {\n\t\t\t\tthis.shielded = false;\n\t\t\t\tthis.shield = null;\n\t\t\t}, 5000)\n\t\t}\n\t}\n\n\thasShield(){\n\t\tlet powerups = Object.values(this.powerups);\n\t\tfor(let i = 0; i < powerups.length; i++){\n\t\t\tif(powerups[i].type === 'shield'){\n\t\t\t\treturn powerups[i];\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}","\n\nexport default class Background{\n  constructor(dimensions, round=0){\n    this.dimensions = dimensions;\n    this.round = round;\n\n    this.colors = [\n      'white',\n      '#5eaec4',\n      // 'green',\n      'blue',\n      'orange'\n    ];\n  }\n\n  // setRound(num){\n  //   this.round = num;\n  // }\n\n  draw(context){\n    context.fillStyle = this.colors[this.round];\n    context.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  animate(context){\n    this.draw(context);\n  }\n}","import Projectile from \"./projectile\";\n\nexport default class Computer{\n  constructor(environment, context, human, id, xPos=850){\n    this.type = 'computer';\n\n\t\tthis.CONSTANTS = {\n      GRAVITY: 0.5,\n      JETPACK: -0.5\n    };\n\n    this.alive = true;\n\t\tthis.environment = environment;\n    this.context = context;\n    this.projectiles = {};\n    this.humanProjectiles = human.projectiles;\n\n    this.additionalScore = 0;\n    this.projectileCount = 10000 + (id * 100);\n    this.id = id;\n\n\t\tthis.xPos = xPos;\n    this.yPos = 100;\n\t\tthis.yVel = 0;\n\t\tthis.xVel = -5;\n\t\tthis.width = 30;\n    this.height = 30;\n\n    this.health = 2;\n    \n    this.human = human;\n\n    this.canShoot = false;\n    this.initiateShot();\n\n\t}\n\n  // ------------------------------------------------------------\n\n  initiateShot(){\n    window.setInterval(() => {\n      if(this.alive) this.shoot();\n    }, 2000);\n  }\n\n  switchDirection(){\n    if(this.xPos <= 20){\n      this.xVel = 5;\n    }else if(this.xPos >= 1080){\n      this.xVel = -5;\n    }\n  }\n\n  shoot(){\n    let pos = {};\n    pos.x = this.human.xPos;\n    pos.y = this.human.yPos;\n\n    let newProj;\n    \n    let randNum = Math.round(Math.random() * 10);\n    if(randNum >= 8){\n      newProj = (\n        new Projectile(\n          this,\n          ...this.configureProjectile(pos),\n          true,\n          this.human\n        )\n      );\n    }else{\n      newProj = (\n        new Projectile(\n          this,\n          ...this.configureProjectile(pos),\n          false,\n          this.human\n        )\n      );\n    }\n        \n    this.projectiles[newProj.id] = newProj;\n    this.projectileCount += 1;\n  }\n\n\tconfigureProjectile(pos, homing=false, projectile=null){\n    let randNum = Math.random();\n    \n    let xDelta;\n    let yDelta;\n\n    // if projectile is homing, we need to call this method and compare the projectile's\n    // current position with that of the human player, else we are comparing the player and the computer\n    if(homing === false){\n      xDelta = pos.x - this.xPos;\n      yDelta = pos.y - this.yPos;\n    }else if(homing === true){\n      xDelta = pos.x - projectile.xPos;\n      yDelta = pos.y - projectile.yPos;\n    }\n\n    if(homing === false){\n      let randOffset = Math.round(Math.random() * 200);\n      if(randNum < 0.25){\n        xDelta += randOffset;\n      }else if(randNum > 0.25 && randNum < 0.5){\n        xDelta -= randOffset;\n      }\n    }\n\n    let squaredDeltaX = Math.pow(xDelta, 2);\n    let squaredDeltaY = Math.pow(yDelta, 2);\n    let totalDeltasquared = squaredDeltaX + squaredDeltaY;\n    let totalDelta = Math.sqrt(totalDeltasquared);\n\n    let proportion;\n    if(projectile === null){\n      proportion = 5 / totalDelta;\n    }else{\n      proportion = 3 / totalDelta;\n    }\n    let xVel = xDelta * proportion;\n    let yVel = yDelta * proportion;\n\n    return [xVel, yVel];\n  }\n\n\n  // ------------------------------------------------------------\n\n  jump(){\n    this.yVel -= 5;\n  }\n\n  moveRight(){\n    this.xVel += 2;\n    if(this.xVel > 5){\n      this.xVel = 5;\n    }\n  }\n\n  moveLeft() {\n    this.xVel -= 2;\n    if (this.xVel < -5) {\n      this.xVel = -5;\n    }\n\t}\n  // ------------------------------------------------------------\n\n\tdraw(context){\n    context.fillStyle = 'red';\n    context.fillRect(\n      this.xPos, this.yPos, this.width, this.height\n    );\n  }\n\n  action(){\n    this.move();\n    if(this.alive){\n      this.switchDirection();\n    }\n  }\n\n  move(){\n    if(!this.alive){\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n      this.xPos += this.xVel;\n    }else{\n      this.xPos += this.xVel;\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yVel += this.CONSTANTS.JETPACK;\n      this.yPos += this.yVel;\n    }\n  }\n  // ------------------------------------------------------------\n  // animate(context, human){\n  animate(context){\n    this.action();\n    this.draw(context);\n  }\n\n}","\n\nexport default class Score{\n  constructor(context, initScore=0){\n    this.xPos = 1050;\n    this.yPos = 100;\n    this.score = initScore;\n\n    this.context = context;\n  }\n\n  animate(){\n    this.draw();\n  }\n\n  draw(){\n    this.context.font = \"20px Arial\";\n    this.context.fillText(this.score, this.xPos, this.yPos);\n  }\n}","import Projectile from \"./projectile\";\n\n\nexport default class LandComputer{\n  constructor(environment, context, human, id){\n    this.environment = environment;\n    this.context = context;\n    this.human = human;\n    this.type = 'land-computer';\n\n    if(id % 2 === 0){\n      this.curPlat = this.environment.head.next;\n      this.nextPlat = this.curPlat.next;\n      this.xPos = this.curPlat.xStart + ((this.curPlat.width) / 2);\n      this.goingRight = true;\n      this.goingLeft = false;\n      this.xVel = 6;\n    }else{\n      this.curPlat = this.environment.tail.prev;\n      this.nextPlat = this.curPlat.prev;\n      this.xPos = this.curPlat.xStart + ((this.curPlat.width) / 2);\n      this.goingRight = false;\n      this.goingLeft = true;\n      this.xVel = -6;\n    }\n\n    this.yPos = this.curPlat.yStart;\n    this.yVel = 0;\n    this.CONSTANTS = {\n      GRAVITY: 0.5,\n    };\n\n    this.id = id;\n    this.health = 2;\n\n    this.projectileCount = 500 * id;\n    this.height = 30;\n    this.width = 30;\n    this.projectiles = {};\n    this.alive = true;\n    this.additionalScore = 0;\n    this.nextPlat = null;\n    this.jumping = false;\n\n    this.initiateShot();\n  }\n\n  initiateShot(){\n    window.setInterval(() => {\n      if(this.alive) this.shoot();\n    }, 2000)\n  }\n\n  getStartPlatforms(){\n    let keys = Object.keys(this.environment.platforms);\n    let mid = Math.round(keys.length / 2);\n    // let mid = Math.round(this.environment.platforms.length / 2);\n    return { left: this.environment.platforms[mid - 1], right: this.environment.platforms[mid + 1]};\n  }\n\n  animate(context){\n    this.action();\n    this.draw(context);\n  }\n\n  action(){\n    this.move();\n  }\n\n  draw(context){\n    context.fillStyle = 'purple';\n    context.fillRect(this.xPos, this.yPos, this.width, this.height);\n  }\n\n  move(){\n    this.getCurrentPlatform();\n    if(!this.alive){\n\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n      return;\n      // this.xPos += this.xVel;\n    }\n\n    if((this.human.xPos >= 800 && this.human.xVel > 0) || (this.human.xPos <= 300 && this.human.xVel < 0)){\n      this.xPos -= this.human.xVel;\n    }\n    // if(this.curPlat && !this)\n    // this.switchDirections();\n    if(this.curPlat && !this.jumping){\n      this.switchDirections();\n      this.yPos = this.curPlat.yStart - this.height;\n      this.xPos += this.xVel;\n    }\n    if(this.isOnEdge()){\n\n      this.beginJump();\n\n      this.jumping = true;\n      this.xPos += this.xVel;\n      this.yPos += this.yVel;\n      this.yVel += this.CONSTANTS.GRAVITY;\n    }\n    // if you have jumped already\n    if(this.jumping){\n\n      // if you have jumped, your yVel is downward, and your ypos is on floor, then land\n      if (this.curPlat && this.yPos >= this.curPlat.yStart - this.height && this.yVel > 0){\n  \n        this.jumping = false;\n        this.yPos = this.curPlat.yStart - this.height;\n        this.yVel = 0;\n        this.xPos += this.xVel;\n      // if you are still midjump\n      }else{\n  \n        this.xPos += this.xVel;\n        this.yPos += this.yVel;\n        this.yVel += this.CONSTANTS.GRAVITY;\n      }\n    }\n  }\n\n  switchDirections(){\n    if (this.goingRight && this.human.xPos < this.xPos - 500) {\n      this.goingLeft = true;\n      this.goingRight = false;\n      this.xVel = this.xVel * (-1);\n    } else if (this.goingLeft && this.human.xPos > this.xPos + 500){\n      this.goingRight = true;\n      this.goingLeft = false;\n      this.xVel = this.xVel * (-1);\n    }\n  }\n\n  isOnEdge(){\n    if(this.goingLeft){\n      if(this.curPlat\n        && this.yPos === this.curPlat.yStart - this.height\n        && this.xPos <= this.curPlat.xStart + 20){\n          return true;\n      }\n    }else if(this.goingRight){\n      if(this.curPlat\n        && this.yPos === this.curPlat.yStart - this.height\n        && this.xPos >= this.curPlat.xStart + this.curPlat.width - this.width - 10){\n          return true;\n      }\n    }\n    return false;\n  }\n\n  beginJump(){\n    let startX = this.xPos;\n    let startY = this.curPlat.yStart;\n    let endY = this.nextPlat.yStart;\n\n    let endX;\n    if(this.goingRight){\n      endX = this.nextPlat.xStart + 10;\n    }else if(this.goingLeft){\n      endX = this.nextPlat.xStart + this.nextPlat.width - this.width - 10;\n    }\n    let xDiff = Math.abs(endX - startX);\n    \n    // steps steps first half, steps steps second half\n    // let dist, steps, yvel = this.calculateFall(xDiff / 2);\n    let obj = this.calculateFall(xDiff / 2);\n    let dist = obj.dist;\n    let steps = obj.steps;\n    let yVel = obj.yVel;\n\n    // let yVertex = this.nextPlat. + dist;\n    if(this.curPlat.yStart <= this.nextPlat.yStart){\n\n      this.yVel = yVel * (-1);\n    } else if (this.curPlat.yStart > this.nextPlat.yStart){\n\n      let maxHeight = (this.nextPlat.yStart - this.curPlat.yStart - dist) * (-1);\n      this.yVel = this.calculateRise(steps, maxHeight) * (-1);\n\n    }\n\n  }\n\n  calculateRise(steps, maxHeight){\n    let roundedSteps = Math.round(steps);\n    let count = 0;\n    for(let i = 1; i <= roundedSteps; i++){\n      count += i;\n    }\n    let initYvel = (maxHeight + (count * 0.5)) / roundedSteps;\n    return initYvel;\n  }\n\n  calculateFall(xDiff){\n    let steps = Math.abs(Math.round(xDiff / this.xVel));\n    let yVel = 0;\n    let dist = 0;\n    for(let i = 0; i < steps; i++){\n      dist += yVel;\n      yVel += this.CONSTANTS.GRAVITY;\n    }\n    return {dist, steps, yVel};\n  }\n\n  // edited getCurrentPlatform so that it sets this.curPlat to null if the comp is not above a platform,\n  // before it would only set new platforms, not set null for no platforms\n  // p.s. never use forEach, it sucks\n  getCurrentPlatform(){\n    for(let i = 0; i < Object.values(this.environment.platforms).length; i++){\n      let platform = Object.values(this.environment.platforms)[i];\n      if(this.xPos > platform.xStart && (this.xPos < platform.xStart + platform.width) && (this.yPos <= platform.yStart + this.height)){\n        this.curPlat = platform;\n        if(this.goingLeft){\n          // this.nextPlat = Object.values(this.environment.platforms)[i - 1];\n          this.nextPlat = this.curPlat.prev;\n        }else if(this.goingRight){\n          // this.nextPlat = Object.values(this.environment.platforms)[i + 1];\n          this.nextPlat = this.curPlat.next;\n        }\n        return;\n      }\n    }\n    this.curPlat = null;\n    this.nextPlat = null;\n  }\n\n\n  shoot(){\n    let newProjectile = new Projectile(\n      this, ...this.configureProjectile({x : this.human.xPos, y : this.human.yPos})\n    );\n    this.projectiles[newProjectile.id] = newProjectile;\n    this.projectileCount += 1;\n  }\n\n  configureProjectile(pos, homing=false, projectile=null){\n    let randNum = Math.random();\n    \n    let xDelta;\n    let yDelta;\n\n    // if projectile is homing, we need to call this method and compare the projectile's\n    // current position with that of the human player, else we are comparing the player and the computer\n    if(homing === false){\n      xDelta = pos.x - this.xPos;\n      yDelta = pos.y - this.yPos;\n    }else if(homing === true){\n      xDelta = pos.x - projectile.xPos;\n      yDelta = pos.y - projectile.yPos;\n    }\n\n    if(homing === false){\n      let randOffset = Math.round(Math.random() * 200);\n      if(randNum < 0.25){\n        xDelta += randOffset;\n      }else if(randNum > 0.25 && randNum < 0.5){\n        xDelta -= randOffset;\n      }\n    }\n\n    let squaredDeltaX = Math.pow(xDelta, 2);\n    let squaredDeltaY = Math.pow(yDelta, 2);\n    let totalDeltasquared = squaredDeltaX + squaredDeltaY;\n    let totalDelta = Math.sqrt(totalDeltasquared);\n\n    let proportion;\n    if(projectile === null){\n      proportion = 5 / totalDelta;\n    }else{\n      proportion = 3 / totalDelta;\n    }\n    let xVel = xDelta * proportion;\n    let yVel = yDelta * proportion;\n\n    return [xVel, yVel];\n  }\n}","import Projectile from \"./projectile\";\n\nexport default class DynamicComputer{\n  constructor(environment, context, human, id, xPos=850){\n    this.type = 'computer';\n\n\t\tthis.CONSTANTS = {\n      GRAVITY: 0.5,\n      JETPACK: -0.5\n    };\n\n    this.moving = true;\n\n    this.alive = true;\n\t\tthis.environment = environment;\n    this.context = context;\n    this.projectiles = {};\n    this.humanProjectiles = human.projectiles;\n\n    this.additionalScore = 0;\n    this.projectileCount = 15000 + (id * 100);\n    this.id = id;\n    this.health = 2;\n\n\t\tthis.xPos = xPos;\n    this.yPos = 100;\n\t\tthis.yVel = 0;\n\t\tthis.xVel = 5;\n\t\tthis.width = 30;\n    this.height = 30;\n    \n    this.stepNum = 0;\n    \n    this.human = human;\n\n\n\t}\n\n  // ------------------------------------------------------------\n\n  switchDirection(){\n    if(this.xPos <= 20){\n      this.xVel = 5;\n    }else if(this.xPos >= 1080){\n      this.xVel = -5;\n    }\n  }\n\n  shoot(){\n    this.configureProjectiles();\n  }\n\n\tconfigureProjectiles(){\n    let totalVel = 5;\n\n    for(let i = 0; i < 8; i++){\n      let newProj = new Projectile(\n        this,\n        ...this.configureProjectile(i, totalVel),\n        false,\n        this.human\n      );\n      this.projectiles[newProj.id] = newProj;\n      this.projectileCount += 1;\n    }\n  }\n\n  configureProjectile(num, totalVel){\n    let xVel;\n    let yVel;\n    if(num % 2 === 0){\n      switch(num){\n        case 0:\n          xVel = 0;\n          yVel = totalVel * (-1);\n          break;\n        case 2:\n          xVel = totalVel;\n          yVel = 0;\n          break;\n        case 4:\n          xVel = 0;\n          yVel = totalVel;\n          break;\n        case 6:\n          xVel = totalVel * (-1);\n          yVel = 0;\n          break;\n      }\n    }else{\n      // let balancedVel = Math.sqrt(2 * Math.pow(totalVel, 2));\n      let balancedVel = totalVel / 2;\n      switch(num){\n        case 1:\n          xVel = balancedVel;\n          yVel = balancedVel * (-1);\n          break;\n        case 3:\n          xVel = balancedVel;\n          yVel = balancedVel;\n          break;\n        case 5:\n          xVel = balancedVel * (-1);\n          yVel = balancedVel;\n          break;\n        case 7:\n          xVel = balancedVel * (-1);\n          yVel = balancedVel * (-1);\n          break;\n      }\n    }\n\n    return [xVel, yVel];\n  }\n\n\n\n\n  // ------------------------------------------------------------\n\n  jump(){\n    this.yVel -= 5;\n  }\n\n  moveRight(){\n    this.xVel += 2;\n    if(this.xVel > 5){\n      this.xVel = 5;\n    }\n  }\n\n  moveLeft() {\n    this.xVel -= 2;\n    if (this.xVel < -5) {\n      this.xVel = -5;\n    }\n  }\n\n\n  configureMove(){\n    this.shoot()\n    let that = this;\n    window.setTimeout(() => {\n      let xConfig = that.configure(that.xPos, 100, 1000, 100);\n      let yConfig = that.configure(that.yPos, 50, 300, 50);\n      that.xVel = xConfig / 10;\n      that.yVel = yConfig / 10;\n      that.moving = true;\n    }, 1000)\n  }\n\n  configure(startPos, d, upperBound, lowerBound){\n    let end;\n    let diff;\n    if(startPos > (0.75 * upperBound)){\n      end = (upperBound / 2) - (Math.random() * d);\n      diff = (startPos - end) * (-1);\n    }else if(startPos < upperBound / 2){\n      end = (upperBound / 2) + (Math.random() * d);\n      diff = end - startPos;\n    }else{\n      diff = d + (Math.random() * d);\n    }\n    return diff;\n  }\n\n  // ------------------------------------------------------------\n  animate(context){\n    this.action();\n    this.draw(context);\n  }\n\n\tdraw(context){\n    context.fillStyle = 'black';\n    context.fillRect(\n      this.xPos, this.yPos, this.width, this.height\n    );\n  }\n\n  action(){\n    this.move();\n    if(this.alive){\n      this.switchDirection();\n    }\n  }\n\n  move2(){\n    if(!this.alive){\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n      this.xPos += this.xVel;\n    }else{\n      this.xPos += this.xVel;\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yVel += this.CONSTANTS.JETPACK;\n      this.yPos += this.yVel;\n    }\n  }\n\n  move3(){\n    if(!this.alive){\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n    }else if(!this.moving){\n      if(this.stepNum === 9){\n        this.stepNum = 0;\n        this.movement.configuringMove = true;\n        this.configureMove();\n      }else{\n        this.yPos += this.yVel;\n        this.xPos += this.xVel;\n        this.stepNum += 1;\n      }\n    }else{\n      if(this.isPlayerOnEdge()){\n        this.xPos += (this.human.xVel * (-1));\n      }\n    }\n  }\n  // if comp is not alive, then apply gravity and move\n  // if stepnum is not at 9, apply x and y vel\n  // if stepnum is at 9, configure move and set stepnum to 0\n  onScreen(){\n      if(this.xPos < 0 || this.xPos > 1100){\n        return false;\n      }else{\n        return true;\n      }\n  }\n\n  move(){\n    if(!this.alive){\n      this.yVel += this.CONSTANTS.GRAVITY;\n      this.yPos += this.yVel;\n    }else if(!this.moving){\n      this.xVel = 0;\n      this.yVel = 0;\n      if(this.isPlayerOnEdge() && this.onScreen()){\n        this.xPos += this.human.xVel * (-1);\n      }\n    }else{\n      if(this.stepNum === 9){\n        this.moving = false;\n        this.stepNum = 0;\n        this.configureMove();\n      }else{\n        this.xPos += this.xVel;\n        this.yPos += this.yVel;\n        this.stepNum += 1;\n      }\n    }\n  }\n\n  isPlayerOnEdge(){\n    return (this.human.xPos >= 800 || this.human.xPos <= 300);\n  }\n\n}","export const collide = (obj1, obj2) => {\n\n  // let obj1TopLeft = {x : obj1.xPos, y: obj1.yPos};\n  // let obj1TopRight = { x: obj1.xPos + obj1.width, y: obj1.yPos };\n  // let obj1BotLeft = { x: obj1.xPos, y: obj1.yPos + obj1.height };\n  // let obj1BotRight = { x : obj1.xPos + obj1.width, y : obj1.yPos + obj1.height};\n\n  let obj1Diag = Math.sqrt(Math.pow(obj1.width / 2, 2) + Math.pow(obj1.height / 2, 2)) / 2;\n\n  // let obj2TopLeft = {x : obj2.xPos, y : obj2.yPos};\n  // let obj2TopRight = { x: obj2.xPos + obj2.width, y: obj2.yPos };\n  // let obj2BotLeft = { x: obj2.xPos, y: obj2.yPos + obj2.height };\n  // let obj2BotRight = {x : obj2.xPos + obj2.width, y : obj2.yPos + obj2.height};\n\n  let obj2Diag = Math.sqrt(Math.pow(obj2.width / 2, 2) + Math.pow(obj2.height / 2, 2)) / 2;\n\n  let totalDelta = Math.sqrt(Math.pow(obj1.xPos - obj2.xPos, 2) + Math.pow(obj1.yPos - obj2.yPos, 2));\n  \n  // if((obj1TopLeft.x < obj2BotRight.x && obj1TopLeft.y < obj2BotRight.y) &&\n  //   (obj1Diag + obj2Diag > totalDelta)){\n  //   return true;\n  // } else if (obj1TopRight.x > obj2BotLeft.x && obj1TopRight.y > obj2BotLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n  //   return true;\n  // } else if (obj1BotRight.x > obj2TopLeft.x && obj1BotRight.y > obj2TopLeft.y && (obj1Diag + obj2Diag > totalDelta)){\n  //   return true;\n  // } else if (obj1BotLeft.x < obj2TopRight.x && obj1BotLeft.y > obj2TopRight.y && (obj1Diag + obj2Diag > totalDelta)){\n  //   return true;\n  // }else{\n  //   return false;\n  // }\n  \n  \n  if(obj1Diag + obj2Diag + 10 > totalDelta){\n    return true;\n  }else{\n    return false;\n  }\n\n}\n\nexport const objectCollision = (obj, projectiles) => {\n  let count = 0;\n  for(let i = 0; i < projectiles.length; i++){\n    let p = projectiles[i];\n    if(collide(obj, p)){\n      if(isComputer(obj) && p.owner === 'human'){\n        if(obj.alive) count += 2;\n      }\n      p.didHit = true;\n      if(!obj.shielded) obj.health -= 1;\n      if(obj.health === 0) obj.alive = false;\n    }\n  }\n\n  return count;\n}\n\nconst isComputer = (obj) => {\n  if(obj.type === 'computer' || obj.type === 'land-computer'){\n    return true;\n  }\n  return false;\n}\n\nexport const powerupCollision = (obj, powerups) => {\n  for(let i = 0; i < powerups.length; i++){\n    let p = powerups[i];\n    if(collide(obj, p)){\n      p.present = false;\n      return p;\n    }\n  }\n  return null;\n}\n\nexport const shieldCollision = (obj, projectiles) => {\n  for(let i = 0; i < projectiles.length; i++){\n    let p = projectiles[i];\n    if(collide(obj, p)){\n      this.reconfigure(obj, p);\n    }\n  }\n}\n\nconst reconfigure = (obj, p) => {\n  // 1\n  let pCoords = {x : p.xPos, y : p.yPos};\n  let objCoords = {x : obj.xPos, y: obj.yPos};\n  let v1 = {start : objCoords, end : pCoords};\n  // 2\n  let v1xDiff = v1.start.x - v1.end.x;\n  let v1yDiff = v1.start.y - v1.end.y;\n  // 3\n  let perpxDiff = v1yDiff;\n  let perpyDiff = v1xDiff;\n  // 4\n  let perpSlope = perpyDiff / perpxDiff;\n\n\n}","import Environment from \"./environment\";\nimport Human from './human';\nimport Background from \"./background\";\nimport Computer from \"./computer\";\nimport Score from \"./score\";\nimport LandComputer from \"./land_computer\";\nimport DynamicComputer from './dynamic_computer';\nimport * as CollisionUtil from './util/collision_logic';\n\n\nexport default class Game{\n  constructor(canvas){\n    this.context = canvas.getContext('2d');\n    this.dimensions = {\n      height: canvas.height,\n      width: canvas.width\n    };\n    this.round = 0;\n    this.roundVals = [0, 5, 10, 15, 20];\n\n    this.computerCount = 0;\n    this.landComputerCount = 0;\n\n    this.computers = {};\n    this.landComputers = {};\n    this.dynamicComputers = {};\n    \n    this.computersBeingAdded = 0;\n    this.numComputers = Object.values(this.computers).length + this.computersBeingAdded;\n    this.dynamicComputersBeingAdded = 0;\n    this.numdynamicComputers = Object.values(this.dynamicComputers).length + this.dynamicComputersBeingAdded;\n    this.landComputersBeingAdded = 0;\n    this.numLandComputers = Object.values(this.landComputers).length + this.landComputersBeingAdded;\n\n    this.canSpawnComp = true;\n    this.canSpawnDynComp = true;\n    this.canSpawnLandComp = true;\n\n    this.humanProjectiles = {};\n    this.computerProjectiles = {};\n    this.landComputerProjectiles = {};\n    this.dynamicComputerProjectiles = {};\n    this.allPowerups = {} // actually only the powerups from the player's current platform\n\n    this.projectileOffset = 100;\n\n    this.startMenu = document.getElementById('start-menu');\n    this.playButton = document.getElementById('play-button');\n    this.gameAndTitle = document.getElementById('game-and-title');\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  filterProjectiles(){\n    this.grabAll();\n\n    this.checkCollisions();\n\n    this.deleteAllProjectiles();\n    // this.deletePowerups();\n\n    this.sendDownProjectiles();\n    // this.sendDownPowerups(this.allPowerups, this.environment.platforms);\n  }\n\n  deleteAllProjectiles(){\n    this.deleteProjectiles(this.humanProjectiles);\n    this.deleteProjectiles(this.computerProjectiles);\n    this.deleteProjectiles(this.landComputerProjectiles);\n    this.deleteProjectiles(this.dynamicComputerProjectiles);\n  }\n\n  sendDownProjectiles(){\n    this.human.projectiles = this.humanProjectiles;\n    this.sendDown(this.computerProjectiles, this.computers);\n    this.sendDown(this.landComputerProjectiles, this.landComputers);\n    this.sendDown(this.dynamicComputerProjectiles, this.dynamicComputers);\n  }\n\n  sendDownPowerups(powerups, platforms){\n    let powerupsArr = Object.values(powerups);\n    for(let i = 0; i < powerupsArr.length; i++){\n      let p = powerupsArr[i];\n      let platId = p.platform.id;\n      if(platforms[platId]){\n        platforms[platId].powerups[p.id] = p;\n      }\n    }\n  }\n\n  sendDown(projectiles, comps){\n    let projectilesArr = Object.values(projectiles);\n    for(let i = 0; i < projectilesArr.length; i++){\n      let p = projectilesArr[i];\n      let compId = p.player.id;\n      if(comps[compId]){\n        comps[compId].projectiles[p.id] = p;\n      }\n    }\n  }\n\n  deletePowerups(){\n    let powersArr = Object.values(this.allPowerups);\n    for(let i = 0; i < powersArr.length; i++){\n      let p = powersArr[i];\n      if(!p.present){\n        delete this.allPowerups[p.id];\n      }\n    }\n  }\n\n  deleteProjectiles(projectiles){\n    Object.values(projectiles).forEach((p) => {\n      if(p.didHit){\n        delete projectiles[p.id];\n      }else if(!p.alive){\n        delete projectiles[p.id];\n      }else if(this.offScreen(p) && !p.homing){\n        delete projectiles[p.id];\n      }\n    })\n  }\n\n  offScreen(projectile){\n    if(projectile.xPos > 1150 || projectile.xPos < -50){\n      return true;\n    }else if(projectile.yPos > 800 || projectile.yPos < -50){\n      return true;\n    }\n    return false;\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  grabAll(){\n    this.grabHumanProjectiles();\n    this.grabComputerProjectiles();\n    this.grabPowerups();\n  }\n\n  grabHumanProjectiles(){\n    this.humanProjectiles = this.human.projectiles;\n  }\n\n  grabComputerProjectiles(){\n    this.grabFrom(this.computerProjectiles, this.computers);\n    this.grabFrom(this.landComputerProjectiles, this.landComputers);\n    this.grabFrom(this.dynamicComputerProjectiles, this.dynamicComputers);\n  }\n\n  grabFrom(projectiles, comps){\n    let compsArr = Object.values(comps);\n    for(let i = 0; i < compsArr.length; i++){\n      let c = compsArr[i];\n      projectiles = Object.assign(projectiles, c.projectiles);\n      c.projectiles = {};\n    }\n\n  }\n\n  grabPowerups(){\n    if(this.human.curPlat){\n      let powerups = Object.values(this.human.curPlat.powerups);\n      for(let i = 0; i < powerups.length; i++){\n        let p = powerups[i];\n        this.allPowerups[p.id] = p;\n      }\n    }\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  checkCollisions(){\n    CollisionUtil.objectCollision(this.human, Object.values(this.computerProjectiles));\n    CollisionUtil.objectCollision(this.human, Object.values(this.landComputerProjectiles));\n    CollisionUtil.objectCollision(this.human, Object.values(this.dynamicComputerProjectiles));\n\n    // this.human.powerups = Object.assign(CollisionUtil.powerupCollision(this.human, Object.values(this.allPowerups)), this.human.powerups);\n    let newPowerup = CollisionUtil.powerupCollision(this.human, Object.values(this.allPowerups));\n    if(newPowerup){\n      this.human.powerups[newPowerup.id] = newPowerup;\n      delete this.environment.platforms[newPowerup.platform.id].powerups[newPowerup.id];\n      delete this.allPowerups[newPowerup.id];\n    }\n\n    this.didPlayerHit(this.computers);\n    this.didPlayerHit(this.landComputers);\n    this.didPlayerHit(this.dynamicComputers);\n    this.didPlayerHit(this.dynamicComputers);\n    let homingProjectiles = Object.values(this.computerProjectiles).filter(p => p.homing === true);\n    for(let i = 0; i < homingProjectiles.length; i++){\n      let hp = homingProjectiles[i]\n      CollisionUtil.objectCollision(hp, Object.values(this.humanProjectiles));\n    }\n  }\n\n  didPlayerHit(objects){\n    let objectsArr = Object.values(objects);\n    for(let i = 0; i < objectsArr.length; i++){\n      let el = objectsArr[i];\n      this.score.score += CollisionUtil.objectCollision(el, Object.values(this.humanProjectiles));\n    }\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  filterComputers(){\n    this.filterHelper(this.computers);\n    this.filterHelper(this.landComputers);\n    this.filterHelper(this.dynamicComputers);\n\n  }\n\n  filterHelper(objects){\n    let arr = Object.keys(objects);\n    for(let i = 0; i < arr.length; i++){\n      let el = arr[i];\n      if(objects[el].yPos > 700){\n        delete objects[el];\n      }\n    }\n  }\n\n  \n\n  switchRounds(){\n    let score = this.score.score;\n    if (score >= 15){\n      this.round = 3;\n    } else if (score >= 10){\n      this.round = 2;\n    }else if (score >= 5){\n      this.round = 1;\n    }else{\n      this.round = 0;\n    }\n    this.background.round = this.round;\n  }\n\n  \n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n\n\n  setNumComputers(){\n    this.numComputers = Object.values(this.computers).length + this.computersBeingAdded;\n  }\n\n  setNumDynamicComputers(){\n    this.numdynamicComputers = Object.values(this.dynamicComputers).length + this.dynamicComputersBeingAdded;\n  }\n\n  setNumLandComputers(){\n    this.numLandComputers = Object.values(this.landComputers).length + this.landComputersBeingAdded;\n  }\n\n  spawnLandComputer(){\n    this.canSpawnLandComp = false;\n    this.landComputersBeingAdded += 1;\n    window.setTimeout(() => {\n      let newLandComp = new LandComputer(this.environment, this.context, this.human, this.landComputerCount);\n      this.landComputers[newLandComp.id] = newLandComp;\n      this.landComputerCount += 1;\n      this.landComputersBeingAdded -= 1;\n      this.canSpawnLandComp = true;\n      console.log('spawned!');\n      console.log(newLandComp.xPos);\n    }, 5000);\n  }\n\n  spawnComputer(){\n    this.canSpawnComp = false;\n    this.computersBeingAdded += 1;\n    let newCompStartX;\n    let randNum = Math.random();\n    if(randNum <= 0.5){\n      newCompStartX = 1150;\n    }else{\n      newCompStartX = -50;\n    }\n    window.setTimeout(() => {\n      let newComp = new Computer(this.environment, this.context, this.human, this.computerCount, newCompStartX);\n      this.computers[this.computerCount] = newComp;\n      this.computerCount += 1;\n      this.computersBeingAdded -= 1;\n      this.canSpawnComp = true;\n    }, 5000);\n  }\n\n  spawnDynamicComputer(){\n    this.canSpawnDynComp = false;\n    this.dynamicComputersBeingAdded += 1;\n    let newCompStartX;\n    let randNum = Math.random();\n    if(randNum <= 0.5){\n      newCompStartX = 1150;\n    }else{\n      newCompStartX = -50;\n    }\n    window.setTimeout(() => {\n      let newDynamicComp = new DynamicComputer(this.environment, this.context, this.human, this.computerCount, newCompStartX);\n      this.dynamicComputers[this.computerCount] = newDynamicComp;\n      this.computerCount += 1;\n      this.dynamicComputersBeingAdded -= 1;\n      this.canSpawnDynComp = true;\n    }, 5000);\n  }\n  \n\n  configureProjectile(pos, homing=false, projectile=null){\n    let randNum = Math.random();\n    \n    let xDelta;\n    let yDelta;\n\n    // if projectile is homing, we need to call this method and compare the projectile's\n    // current position with that of the human player, else we are comparing the player and the computer\n    if(homing === false){\n      xDelta = pos.x - this.xPos;\n      yDelta = pos.y - this.yPos;\n    }else if(homing === true){\n      xDelta = pos.x - projectile.xPos;\n      yDelta = pos.y - projectile.yPos;\n    }\n\n    if(homing === false){\n      let randOffset = Math.round(Math.random() * 200);\n      if(randNum < 0.25){\n        xDelta += randOffset;\n      }else if(randNum > 0.25 && randNum < 0.5){\n        xDelta -= randOffset;\n      }\n    }\n\n    let squaredDeltaX = Math.pow(xDelta, 2);\n    let squaredDeltaY = Math.pow(yDelta, 2);\n    let totalDeltasquared = squaredDeltaX + squaredDeltaY;\n    let totalDelta = Math.sqrt(totalDeltasquared);\n\n    let proportion;\n    if(projectile === null){\n      proportion = 5 / totalDelta;\n    }else{\n      proportion = 3 / totalDelta;\n    }\n    let xVel = xDelta * proportion;\n    let yVel = yDelta * proportion;\n\n    return [xVel, yVel];\n  }\n\n  createInitialComputers(offset=1){\n    let i = 1;\n    let compStartX;\n    while(i < 3){\n      if(i % 2 === 0){\n        compStartX = 1150 + (100 * i);\n      }else{\n        compStartX = -50 - (100 * i);\n      }\n      let newComp = new Computer(this.environment, this.context, this.human, this.computerCount, compStartX);\n      this.computers[this.computerCount] = newComp;\n      this.computerCount += 1;\n      i += 1;\n    }\n    let j = 0;\n    while(j < 2){\n      let newLandComp = new LandComputer(this.environment, this.context, this.human, this.landComputerCount);\n      this.landComputers[newLandComp.id] = newLandComp;\n      this.landComputerCount += 1;\n      j += 1;\n    }\n    let k = 0;\n    while(k < 2){\n      if(k % 2 === 0){\n        compStartX = 1150 + (100 * k);\n      }else{\n        compStartX = -50 - (100 * k);\n      }\n      let newDynamicComp = new DynamicComputer(this.environment, this.context, this.human, this.computerCount, compStartX);\n      this.dynamicComputers[newDynamicComp.id] = newDynamicComp;\n      this.computerCount += 1;\n      k += 1;\n    }\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\n  restart(){\n    this.background = new Background(this.dimensions);\n    this.environment = new Environment(this.dimensions, this.context);\n    this.human = new Human(this.environment, this.context, this.computerProjectiles);\n    this.environment.human = this.human;\n    this.score = new Score(this.context);\n    this.createInitialComputers();\n    this.gameAndTitle.removeChild(this.startMenu);\n    this.step();\n  }\n\n  step(){\n    this.animate();\n    this.filterProjectiles();\n    this.filterComputers();\n    this.switchRounds();\n    this.setNumComputers();\n    this.setNumDynamicComputers();\n    this.setNumLandComputers();\n\n    if(this.numComputers < 2){\n      if(this.canSpawnComp) this.spawnComputer();\n    }\n    if(this.numdynamicComputers < 2){\n      if(this.canSpawnDynComp) this.spawnDynamicComputer();\n    }\n    if(this.numLandComputers < 2){\n      if(this.canSpawnLandComp) this.spawnLandComputer();\n    }\n    if(!this.gameOver()){\n      window.requestAnimationFrame(this.step.bind(this));\n    }else{\n      this.gameAndTitle.appendChild(this.startMenu);\n    }\n  }\n\n  animate(){\n    this.background.animate(this.context);\n    this.environment.animate(this.context);\n    this.human.animate(this.context);\n    this.score.animate();\n    this.animateProjectiles();\n    let that = this;\n    Object.values(this.computers).forEach((c) => {\n      c.animate(this.context, this.human);\n    });\n    // Object.values(this.landComputers).forEach((comp) => {\n    //   if(!comp.type){\n    //     console.log()\n    //     debugger;\n    //   }\n    //   comp.animate(this.context);\n    // })\n\n    for(let i = 0; i < Object.values(this.landComputers).length; i++){\n      let comp = Object.values(this.landComputers)[i];\n      if(!comp.type){\n        debugger;\n      }\n      comp.animate(this.context);\n\n    }\n\n\n    Object.values(this.dynamicComputers).forEach((dc) => {\n      dc.animate(this.context, this.human);\n    });\n\n  }\n\n  animateProjectiles(){\n    Object.values(this.humanProjectiles).forEach((p) => {\n      p.animate(this.context);\n    })\n    Object.values(this.computerProjectiles).forEach((p) => {\n      if(p.homing){\n        let pos = {x : this.human.xPos, y: this.human.yPos};\n        p.animate(this.context, ...this.configureProjectile(pos, true, p));\n      }else{\n        p.animate(this.context);\n      }\n    })\n    Object.values(this.landComputerProjectiles).forEach((p) => {\n      p.animate(this.context);\n    })\n    for(let i = 0; i < Object.values(this.dynamicComputerProjectiles).length; i++){\n      let p = Object.values(this.dynamicComputerProjectiles)[i];\n      p.animate(this.context);\n    }\n  }\n\n\n\n  gameOver(){\n    if(this.human.yPos > 710){\n      return true;\n    }else if(!this.human.alive && this.human.yPos > 710){\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n\n}\n\n\n\n","import \"./styles/index.scss\";\n\nimport Game from './game';\n\nconst canvas = document.getElementById('main-canvas');\n// const app = new PIXI.Application({\n//   view: canvas\n// })\n\nlet gameAndTitle = document.getElementById('game-and-title');\nlet startMenu = document.getElementById('start-menu');\nlet playButton = document.getElementById('play-button');\n\nplayButton.addEventListener('mousedown', () => {\n  let game = new Game(canvas);\n  game.restart();\n})\n\n"],"sourceRoot":""}